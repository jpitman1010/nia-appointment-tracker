{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACgG;AACjB;AACO;AACtF,4CAA4C,yhBAAmQ;AAC/S,8BAA8B,sEAA2B,CAAC,+EAAqC;AAC/F,yCAAyC,yEAA+B;AACxE;AACA,sDAAsD,kBAAkB,gBAAgB,cAAc,iCAAiC,cAAc,6CAA6C,gCAAgC,SAAS,kBAAkB,WAAW,oBAAoB,6BAA6B,kBAAkB,UAAU,MAAM,OAAO,6BAA6B,6BAA6B,sDAAsD,SAAS,kBAAkB,WAAW,kBAAkB,gBAAgB,gGAAgG,kBAAkB,+GAA+G,8BAA8B,kCAAkC,oCAAoC,gCAAgC,sCAAsC,kBAAkB,eAAe,cAAc,sBAAsB,kBAAkB,wHAAwH,aAAa,wIAAwI,uBAAuB,mCAAmC,EAAE,4BAA4B,2BAA2B,kCAAkC,wBAAwB,kCAAkC,wBAAwB,kCAAkC,yBAAyB,kCAAkC,yBAAyB,kCAAkC,iBAAiB,WAAW,YAAY,8BAA8B,gCAAgC,iCAAiC,gBAAgB,YAAY,8BAA8B,UAAU,WAAW,kCAAkC,iBAAiB,WAAW,YAAY,8BAA8B,kCAAkC,iCAAiC,gBAAgB,WAAW,SAAS,YAAY,kCAAkC,kCAAkC,iBAAiB,WAAW,YAAY,oCAAoC,kCAAkC,iCAAiC,gBAAgB,YAAY,UAAU,oCAAoC,WAAW,kCAAkC,iBAAiB,WAAW,YAAY,oCAAoC,gCAAgC,iCAAiC,gBAAgB,WAAW,SAAS,YAAY,gCAAgC,4DAA4D,uBAAuB,uCAAuC,qBAAqB,uCAAuC,yBAAyB,8CAA8C,cAAc,gGAAgG,sCAAsC,WAAW,yDAAyD,iDAAiD,kLAAkL,6CAA6C,uCAAuC,MAAM,uCAAuC,OAAO,OAAO,2yCAA2yC,kBAAkB,gBAAgB,cAAc,iCAAiC,cAAc,6CAA6C,gCAAgC,SAAS,kBAAkB,WAAW,oBAAoB,6BAA6B,kBAAkB,UAAU,MAAM,OAAO,6BAA6B,6BAA6B,sDAAsD,SAAS,kBAAkB,WAAW,kBAAkB,gBAAgB,gGAAgG,kBAAkB,+GAA+G,8BAA8B,kCAAkC,oCAAoC,gCAAgC,sCAAsC,kBAAkB,eAAe,cAAc,sBAAsB,kBAAkB,wHAAwH,aAAa,wIAAwI,yCAAyC,gOAAgO,4BAA4B,2BAA2B,kCAAkC,wBAAwB,kCAAkC,wBAAwB,kCAAkC,yBAAyB,kCAAkC,yBAAyB,kCAAkC,iBAAiB,WAAW,YAAY,8BAA8B,gCAAgC,iCAAiC,gBAAgB,YAAY,8BAA8B,UAAU,WAAW,kCAAkC,iBAAiB,WAAW,YAAY,8BAA8B,kCAAkC,iCAAiC,gBAAgB,WAAW,SAAS,YAAY,kCAAkC,kCAAkC,iBAAiB,WAAW,YAAY,oCAAoC,kCAAkC,iCAAiC,gBAAgB,YAAY,UAAU,oCAAoC,WAAW,kCAAkC,iBAAiB,WAAW,YAAY,oCAAoC,gCAAgC,iCAAiC,gBAAgB,WAAW,SAAS,YAAY,gCAAgC,4DAA4D,uBAAuB,uCAAuC,qBAAqB,uCAAuC,yBAAyB,8CAA8C,cAAc,gGAAgG,sCAAsC,WAAW,yDAAyD,iDAAiD,kLAAkL,6CAA6C,yCAAyC,MAAM,yCAAyC,OAAO,mBAAmB;AAChyQ;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;ACV1B;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA,gDAAgD;AAChD;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sFAAsF,qBAAqB;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,iDAAiD,qBAAqB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,sDAAsD,qBAAqB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;ACpFa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;ACzBa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,cAAc;AACrE;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACyC;AACT;AACiB;AACkC;AACnF;AACA;AACA,kBAAkB;AAClB,0BAA0B,0DAAe;AACzC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAO;AACvB,sDAAsD,iDAAU;AAChE,uDAAuD,kDAAW;AAClE,sDAAsD;AACtD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAO;AACvB,yDAAyD,iDAAU;AACnE,0DAA0D,kDAAW;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAS;AACrB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAS;AACxB,eAAe,kDAAS;AACxB;AACA,kEAAkE,8BAA8B,GAAG;AACnG;AACA,YAAY,8CAAO;AACnB,0DAA0D,gDAAS;AACnE,yDAAyD,+CAAQ;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK,gBAAgB,+BAA+B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS,OAAO,IAAI,GAAG,IAAI;AACrD;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB,+CAA+C,kDAAS,cAAc,kDAAS;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAS;AACrB;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB;AACA;AACA,uBAAuB,kDAAS;AAChC;AACA;AACA;AACA,iCAAiC,yCAAK;AACtC;AACA;AACA,uBAAuB,yCAAK,gBAAgB,oCAAoC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO,uBAAuB;AAC1C,6DAA6D,gDAAS;AACtE,4DAA4D,+CAAQ;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB,uBAAuB,kDAAS;AAChC;AACA;AACA;AACA,sCAAsC;AACtC;AACA,uBAAuB,yCAAK,gBAAgB,mCAAmC;AAC/E;AACA,sCAAsC;AACtC;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB,gBAAgB,kDAAS;AACzB;AACA;AACA;AACA;AACA,eAAe,kDAAS;AACxB,eAAe,kDAAS;AACxB,eAAe,kDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,gCAAgC,kDAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA,+CAA+C,cAAc;AAC7D,8BAA8B;AAC9B;AACA,gCAAgC,oEAAoE;AACpG;AACA;AACA;AACA;AACA;AACA,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yCAAK;AAC1B;AACA;AACA,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,kCAAkC;AAClC;AACA;AACA;AACA,kCAAkC;AAClC,6BAA6B;AAC7B,mCAAmC;AACnC;AACA;AACA,yCAAyC;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC,4DAA4D;AAC5D,qBAAqB,YAAY;AACjC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qCAAqC,8CAA8C,YAAY;AACrH;AACA;AACA;AACA;AACA;AACA;AACuB;AACvB,wC;;;;;;;;;;;;;;;;;;ACzWA;AACA;AACA;AACA;AACyC;AACQ;AACjB;AACiC;AACjE,kBAAkB;AACX,0BAA0B,0DAAe;AAChD,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB,qDAAqD,mDAAY;AACjE,qDAAqD,mDAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB,wDAAwD,mDAAY;AACpE,wDAAwD,mDAAY;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS,QAAQ,6DAA6D,IAAI;AAC5G,aAAa,kDAAS;AACtB;AACA,2BAA2B,kDAAS;AACpC;AACA;AACA;AACA;AACA,YAAY,kDAAS,gBAAgB,kDAAS;AAC9C,YAAY,kDAAS,mCAAmC;AACxD;AACA,QAAQ,kDAAS;AACjB,mBAAmB,yCAAK,gBAAgB,mCAAmC;AAC3E;AACA,0CAA0C,kDAAS;AACnD;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,0BAA0B,SAAS,QAAQ,6DAA6D,IAAI;AAC5G,aAAa,kDAAS,gBAAgB,kDAAS;AAC/C;AACA;AACA;AACA,mBAAmB,yCAAK,gBAAgB,kCAAkC;AAC1E;AACA,yCAAyC,kDAAS;AAClD;AACA;AACA,YAAY,kDAAS;AACrB,mBAAmB,kDAAS;AAC5B,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK,gBAAgB,+BAA+B;AACvE;AACA,0CAA0C,kDAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA;AAC6C;AACA;AACA;AACtC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACgC;AACS;AACA;AACzC,kBAAkB;AAClB;AACA;AACA;AACO;AACP;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAS,eAAe,kDAAS,gCAAgC,kDAAS,eAAe,kDAAS;AAC9H,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yCAAK;AAC3B;AACA;AACA,6DAA6D,kDAAS,kCAAkC;AACxG;AACA;AACA;AACA,wC;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,sC;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACmF;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yBAAyB,EAAE,SAAS;AAChE;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB,mDAAmD,iDAAU;AAC7D,oDAAoD,kDAAW;AAC/D,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB,sDAAsD,iDAAU;AAChE,uDAAuD,kDAAW;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,8BAA8B,GAAG;AACnG;AACA,YAAY,8CAAO;AACnB,kDAAkD,gDAAS;AAC3D,iDAAiD,+CAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAO;AACnB,qDAAqD,gDAAS;AAC9D,oDAAoD,+CAAQ;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC6B;AAC7B,+C;;;;;;;;;;;;;;;;;;AChHA;AACA;AACA;AACA;AAC0D;AACT;AACjB;AACS;AACzC,0BAA0B,0DAAe;AACzC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iCAAiC,YAAY;AACjF;AACA;AACA,iBAAiB;AACjB,gCAAgC,6BAA6B,gBAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAS;AACzB,uBAAuB,kDAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS,YAAY,mDAAmD;AAClG;AACA,YAAY,kDAAS,sBAAsB,kDAAS;AACpD;AACA,QAAQ,kDAAS;AACjB,0BAA0B,SAAS,QAAQ,mDAAmD;AAC9F;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS,YAAY,mDAAmD;AAClG,YAAY,kDAAS;AACrB;AACA,eAAe,kDAAS;AACxB,0BAA0B,SAAS,QAAQ,mDAAmD;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mEAAiB;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6BAA6B,yCAAK,mDAAmD;AACrF;AACA,wBAAwB,yCAAK;AAC7B;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK,oBAAoB,sCAAsC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK,oBAAoB,iCAAiC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK,oBAAoB,qCAAqC;AACjF;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yCAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,oBAAoB,YAAY;AAChC,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACuB;AACvB,wC;;;;;;;;;;;;;;;;;;;;;;AC/SA;AACA;AACA;AACA;AACyC;AACT;AAChC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yCAAK;AACT;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yCAAK;AACT;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kDAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,iDAAiD;AACjD;AACO;AACP;AACA,SAAS,kDAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,SAAS,kDAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,oC;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,4BAA4B;AAC5B,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,0DAA0D;AAC1D;AACA;AACA,yBAAyB;AACzB;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uBAAuB,oCAAoC,iCAAiC;AACtI;AACA,gCAAgC;AAChC;AACA,yCAAyC,yCAAK;AAC9C;AACA,oBAAoB,yCAAK,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAK;AACzB;AACA;AACA;AACA;AACA;AACA,iDAAiD,mDAAmD;AACpG;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,yCAAK;AAClF;AACA;AACA;AACA;AACA,+EAA+E,yCAAK;AACpF;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,kDAAkD;AAClD;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,sFAAsF,yCAAK;AAC3F;AACA;AACA,oBAAoB;AACpB;AACA,mEAAmE,yCAAK;AACxE;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,mEAAmE,yCAAK;AACxE;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,qBAAqB,yCAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iCAAiC;AACvF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,iCAAiC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,QAAQ,yCAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yCAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yCAAK,WAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yCAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,yCAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yCAAK,WAAW;AACtC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yCAAK;AACjC;AACA,YAAY,yCAAK;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,oCAAoC,yCAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,UAAU;AAC1F;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,yBAAyB;AACzB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yCAAK;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS,SAAS;AAC3D,SAAS;AACT,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yCAAK,WAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK,WAAW,eAAe;AAClD,QAAQ,yCAAK;AACb;AACA,QAAQ,yCAAK;AACb,+BAA+B,yCAAK;AACpC;AACA,wBAAwB,yCAAK,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yCAAK;AAClC,2BAA2B,yCAAK;AAChC,2BAA2B,yCAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,2BAA2B,yCAAK;AAChC;AACA,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,yCAAK,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,YAAY,yCAAK;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6CAA6C,yCAAK,uBAAuB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,uBAAuB,yCAAK;AAC5B,yCAAyC;AACzC,6BAA6B;AAC7B;AACA,2CAA2C;AAC3C,mCAAmC;AACnC,aAAa;AACb;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA,wBAAwB,sCAAsC;AAC9D,SAAS;AACT,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2B;AAC3B,4C;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACl/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACqD;AACX;AACH;AACvC;AACA;AACA;AACA;AACA;AACA;AAC6C;AACR;AACI;AACzC,eAAe,sDAAW;AAC1B;AACwB;AACA;AACW;AACJ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,yCAAK;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,iDAAiD,yCAAK;AACtD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yCAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yCAAK,wCAAwC,gDAAY;AACzF,qCAAqC,yCAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yCAAK,WAAW,gDAAY;AAC3C,oBAAoB,yCAAK,2CAA2C,gDAAY;AAChF,wCAAwC,yCAAK,4CAA4C,gDAAY;AACrG,wCAAwC,yCAAK,4CAA4C,gDAAY;AACrG,wBAAwB,yCAAK,yCAAyC,gDAAY;AAClF,2BAA2B,yCAAK;AAChC;AACA,0GAA0G,gDAAY;AACtH,aAAa;AACb;AACA,0CAA0C,gDAAY;AACtD,yBAAyB,gDAAY;AACrC,aAAa;AACb;AACA,6CAA6C;AAC7C,+BAA+B,yCAAK;AACpC;AACA,eAAe,yCAAK;AACpB,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gDAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG,gDAAY;AACjH;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,0CAA0C,8CAAO;AACjD;AACA;AACA,yEAAyE,8DAAe;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA,gCAAgC;AAChC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,oCAAoC,kDAAS;AAC7C,YAAY,kDAAS;AACrB;AACA,YAAY,kDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yCAAK;AACb;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK;AACxB,qBAAqB,yCAAK;AAC1B,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yCAAK;AACnB;AACA;AACA,qCAAqC;AACrC,6CAA6C;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,2BAA2B;AAC3B,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yCAAK;AAC/B;AACA,0BAA0B,yCAAK;AAC/B;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,mCAAmC,MAAM;AACzC,uDAAuD;AACvD;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yCAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yCAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qBAAqB;AACtF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,sBAAsB,yCAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yCAAK,0BAA0B,gDAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yCAAK,mBAAmB;AACxC;AACA;AACA,6BAA6B,gBAAgB,iBAAiB;AAC9D;AACA,gBAAgB,yCAAK;AACrB,4EAA4E;AAC5E;AACA;AACA;AACA,6BAA6B,oDAAoD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,6BAA6B,yCAAK;AAClC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,gBAAgB,yCAAK;AACrB;AACA;AACA,cAAc;AACd;AACA,SAAS;AACT;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA,oBAAoB,yCAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAK;AACzB,0CAA0C,0BAA0B;AACpE,oBAAoB,yCAAK,mBAAmB;AAC5C;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yCAAK,yCAAyC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yCAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,qBAAqB,EAAE,yBAAyB;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU,OAAO,SAAS,KAAK,OAAO,KAAK,MAAM;AACvG;AACA;AACA,6BAA6B;AAC7B,0DAA0D,mCAAmC;AAC7F;AACA;AACA,6BAA6B;AAC7B,0DAA0D,mBAAmB,cAAc,iBAAiB;AAC5G;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sBAAsB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,GAAG,yCAAK,WAAW,SAAS,yCAAK,mBAAmB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,MAAM,GAAG,gCAAgC;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yCAAK;AACtB;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,gCAAgC;AAChC;AACA;AACA,6BAA6B;AAC7B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,yCAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG,SAAS;AAClH;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8BAA8B;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yCAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gDAAY;AACrC,8BAA8B,yCAAK;AACnC;AACA;AACA;AACA,aAAa,yCAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,KAAK;AACrF,kFAAkF,KAAK;AACvF,+CAA+C,KAAK;AACpD,gDAAgD,KAAK;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yCAAK;AACnB,cAAc,yCAAK;AACnB,cAAc,yCAAK;AACnB,cAAc,yCAAK;AACnB,yBAAyB,yCAAK;AAC9B,qBAAqB,yCAAK;AAC1B,mBAAmB,yCAAK;AACxB,mBAAmB,yCAAK;AACxB;AACA;AACA;AACA,kCAAkC,yCAAK;AACvC;AACA;AACA;AACA;AACA;AACA,iBAAiB,yCAAK;AACtB,iBAAiB,yCAAK;AACtB,iBAAiB,yCAAK;AACtB,iBAAiB,yCAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB,yCAAK;AACrB;AACA;AACA,6CAA6C,yCAAK;AAClD,kDAAkD;AAClD;AACA;AACA,oBAAoB,yCAAK;AACzB;AACA,aAAa;AACb,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAK;AACtC;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO,yCAAK;AAC9D;AACA,mDAAmD,OAAO,yCAAK;AAC/D;AACA,iCAAiC;AACjC;AACA,kCAAkC,OAAO,yCAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yCAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yCAAK;AAC5B;AACA;AACA;AACA,SAAS;AACT,0CAA0C;AAC1C;AACA,oDAAoD;AACpD;AACA;AACA;AACA,qDAAqD,oBAAoB,EAAE,qBAAqB;AAChG,wDAAwD,uBAAuB,EAAE,qBAAqB;AACtG,uDAAuD,sBAAsB,EAAE,qBAAqB;AACpG,sDAAsD,qBAAqB,EAAE,qBAAqB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA,YAAY,kDAAS;AACrB;AACA,0BAA0B,0DAA0D,KAAK;AACzF,mDAAmD,yCAAK;AACxD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,gFAAgF;AAChF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,oFAAoF;AACpF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,8BAA8B,GAAG,8BAA8B;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,4CAA4C;AAC5C,gCAAgC;AAChC;AACA;AACA;AACA,wBAAwB,yCAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAA0D;AAC1F;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B,EAAE,QAAQ,IAAI;AAC5E;AACA;AACA;AACA,uCAAuC;AACvC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,sCAAsC;AACtC;AACA,8BAA8B;AAC9B;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA,kDAAkD;AAClD,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA,kCAAkC,2BAA2B,EAAE,QAAQ,IAAI;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,yDAAyD;AACzD,YAAY,yCAAK,kDAAkD;AACnE,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,2BAA2B;AAC7E;AACA,0BAA0B;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA,oBAAoB,yCAAK;AACzB;AACA;AACA,wBAAwB,yCAAK,4BAA4B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,qDAAqD;AACrD,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAK;AACtC;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,0DAA0D;AAC1D,uCAAuC;AACvC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,gBAAgB,yCAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,4CAA4C;AAC5C;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yCAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6CAA6C;AAC3F;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,sCAAsC;AACtC,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gDAAQ,iEAAiE;AACxF;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,kBAAkB,yCAAK;AACvB;AACA,mBAAmB,8DAAe;AAClC;AACqB;AACrB,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACr+EA,MAAqF;AACrF,MAA2E;AAC3E,MAAkF;AAClF,MAAqG;AACrG,MAA8F;AAC9F,MAA8F;AAC9F,MAAiG;AACjG;AACA;;AAEA;;AAEA,4BAA4B,wFAAmB;AAC/C,wBAAwB,qGAAa;;AAErC,uBAAuB,0FAAa;AACpC;AACA,iBAAiB,kFAAM;AACvB,6BAA6B,yFAAkB;;AAE/C,aAAa,6FAAG,CAAC,iFAAO;;;;AAI2C;AACnE,OAAO,iEAAe,iFAAO,IAAI,iFAAO,UAAU,iFAAO,mBAAmB,EAAC;;;;;;;;;;;;;;;AC1B7E;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oEAAoE;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAgE;AACxF,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oDAAoD;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,IAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uFAAuF;AACvmCAAmC,eAAe,oBAAoB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iDAAiD;AACjF;AACA;AACA,gCAAgC,4DAA4D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF;AAClF,oGAAoG;AACpG,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;AC5jBa;;AAEb;AACA;AACA;AACA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA,qBAAqB,6BAA6B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;ACnFa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;ACjCa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;ACTa;;AAEb;AACA;AACA,cAAc,KAAwC,GAAG,sBAAiB,GAAG,CAAI;AACjF;AACA;AACA;AACA;AACA,gD;;;;;;;;;;ACTa;;AAEb;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yDAAyD;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wB;;;;;;;;;;AC5Da;;AAEb;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;;;;;UCbA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA,oB;;;;;WCrBA,mC;;;;;;;;;;;;;;;;;0BCCA,uKAAAA,CAAA,EAAAC,CAAA,EAAAC,CAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAF,CAAA,CAAAG,QAAA,kBAAAC,CAAA,GAAAJ,CAAA,CAAAK,WAAA,8BAAAC,EAAAN,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAE,CAAA,QAAAC,CAAA,GAAAL,CAAA,IAAAA,CAAA,CAAAM,SAAA,YAAAC,SAAA,GAAAP,CAAA,GAAAO,SAAA,EAAAC,CAAA,GAAAC,MAAA,CAAAC,MAAA,CAAAL,CAAA,CAAAC,SAAA,UAAAK,mBAAA,CAAAH,CAAA,uBAAAV,CAAA,EAAAE,CAAA,EAAAE,CAAA,QAAAE,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAI,CAAA,MAAAC,CAAA,GAAAX,CAAA,QAAAY,CAAA,OAAAC,CAAA,KAAAF,CAAA,KAAAb,CAAA,KAAAgB,CAAA,EAAApB,CAAA,EAAAqB,CAAA,EAAAC,CAAA,EAAAN,CAAA,EAAAM,CAAA,CAAAC,IAAA,CAAAvB,CAAA,MAAAsB,CAAA,WAAAA,EAAArB,CAAA,EAAAC,CAAA,WAAAM,CAAA,GAAAP,CAAA,EAAAQ,CAAA,MAAAG,CAAA,GAAAZ,CAAA,EAAAmB,CAAA,CAAAf,CAAA,GAAAF,CAAA,EAAAmB,CAAA,gBAAAC,EAAApB,CAAA,EAAAE,CAAA,SAAAK,CAAA,GAAAP,CAAA,EAAAU,CAAA,GAAAR,CAAA,EAAAH,CAAA,OAAAiB,CAAA,IAAAF,CAAA,KAAAV,CAAA,IAAAL,CAAA,GAAAgB,CAAA,CAAAO,MAAA,EAAAvB,CAAA,UAAAK,CAAA,EAAAE,CAAA,GAAAS,CAAA,CAAAhB,CAAA,GAAAqB,CAAA,GAAAH,CAAA,CAAAF,CAAA,EAAAQ,CAAA,GAAAjB,CAAA,KAAAN,CAAA,QAAAI,CAAA,GAAAmB,CAAA,KAAArB,CAAA,MAAAQ,CAAA,GAAAJ,CAAA,EAAAC,CAAA,GAAAD,CAAA,YAAAC,CAAA,WAAAD,CAAA,MAAAA,CAAA,MAAAR,CAAA,IAAAQ,CAAA,OAAAc,CAAA,MAAAhB,CAAA,GAAAJ,CAAA,QAAAoB,CAAA,GAAAd,CAAA,QAAAC,CAAA,MAAAU,CAAA,CAAAC,CAAA,GAAAhB,CAAA,EAAAe,CAAA,CAAAf,CAAA,GAAAI,CAAA,OAAAc,CAAA,GAAAG,CAAA,KAAAnB,CAAA,GAAAJ,CAAA,QAAAM,CAAA,MAAAJ,CAAA,IAAAA,CAAA,GAAAqB,CAAA,MAAAjB,CAAA,MAAAN,CAAA,EAAAM,CAAA,MAAAJ,CAAA,EAAAe,CAAA,CAAAf,CAAA,GAAAqB,CAAA,EAAAhB,CAAA,cAAAH,CAAA,IAAAJ,CAAA,aAAAmB,CAAA,QAAAH,CAAA,OAAAd,CAAA,qBAAAE,CAAA,EAAAW,CAAA,EAAAQ,CAAA,QAAAT,CAAA,YAAAU,SAAA,uCAAAR,CAAA,UAAAD,CAAA,IAAAK,CAAA,CAAAL,CAAA,EAAAQ,CAAA,GAAAhB,CAAA,GAAAQ,CAAA,EAAAL,CAAA,GAAAa,CAAA,GAAAxB,CAAA,GAAAQ,CAAA,OAAAT,CAAA,GAAAY,CAAA,MAAAM,CAAA,KAAAV,CAAA,KAAAC,CAAA,GAAAA,CAAA,QAAAA,CAAA,SAAAU,CAAA,CAAAf,CAAA,QAAAkB,CAAA,CAAAb,CAAA,EAAAG,CAAA,KAAAO,CAAA,CAAAf,CAAA,GAAAQ,CAAA,GAAAO,CAAA,CAAAC,CAAA,GAAAR,CAAA,aAAAI,CAAA,MAAAR,CAAA,QAAAC,CAAA,KAAAH,CAAA,YAAAL,CAAA,GAAAO,CAAA,CAAAF,CAAA,WAAAL,CAAA,GAAAA,CAAA,CAAA0B,IAAA,CAAAnB,CAAA,EAAAI,CAAA,UAAAc,SAAA,2CAAAzB,CAAA,CAAA2B,IAAA,SAAA3B,CAAA,EAAAW,CAAA,GAAAX,CAAA,CAAA4B,KAAA,EAAApB,CAAA,SAAAA,CAAA,oBAAAA,CAAA,KAAAR,CAAA,GAAAO,CAAA,eAAAP,CAAA,CAAA0B,IAAA,CAAAnB,CAAA,GAAAC,CAAA,SAAAG,CAAA,GAAAc,SAAA,uCAAApB,CAAA,gBAAAG,CAAA,OAAAD,CAAA,GAAAR,CAAA,cAAAC,CAAA,IAAAiB,CAAA,GAAAC,CAAA,CAAAf,CAAA,QAAAQ,CAAA,GAAAV,CAAA,CAAAyB,IAAA,CAAAvB,CAAA,EAAAe,CAAA,OAAAE,CAAA,kBAAApB,CAAA,IAAAO,CAAA,GAAAR,CAAA,EAAAS,CAAA,MAAAG,CAAA,GAAAX,CAAA,cAAAe,CAAA,mBAAAa,KAAA,EAAA5B,CAAA,EAAA2B,IAAA,EAAAV,CAAA,SAAAhB,CAAA,EAAAI,CAAA,EAAAE,CAAA,QAAAI,CAAA,QAAAS,CAAA,gBAAAV,UAAA,cAAAmB,kBAAA,cAAAC,2BAAA,KAAA9B,CAAA,GAAAY,MAAA,CAAAmB,cAAA,MAAAvB,CAAA,MAAAL,CAAA,IAAAH,CAAA,CAAAA,CAAA,IAAAG,CAAA,SAAAW,mBAAA,CAAAd,CAAA,OAAAG,CAAA,iCAAAH,CAAA,GAAAW,CAAA,GAAAmB,0BAAA,CAAArB,SAAA,GAAAC,SAAA,CAAAD,SAAA,GAAAG,MAAA,CAAAC,MAAA,CAAAL,CAAA,YAAAO,EAAAhB,CAAA,WAAAa,MAAA,CAAAoB,cAAA,GAAApB,MAAA,CAAAoB,cAAA,CAAAjC,CAAA,EAAA+B,0BAAA,KAAA/B,CAAA,CAAAkC,SAAA,GAAAH,0BAAA,EAAAhB,mBAAA,CAAAf,CAAA,EAAAM,CAAA,yBAAAN,CAAA,CAAAU,SAAA,GAAAG,MAAA,CAAAC,MAAA,CAAAF,CAAA,GAAAZ,CAAA,WAAA8B,iBAAA,CAAApB,SAAA,GAAAqB,0BAAA,EAAAhB,mBAAA,CAAAH,CAAA,iBAAAmB,0BAAA,GAAAhB,mBAAA,CAAAgB,0BAAA,iBAAAD,iBAAA,GAAAA,iBAAA,CAAAK,WAAA,wBAAApB,mBAAA,CAAAgB,0BAAA,EAAAzB,CAAA,wBAAAS,mBAAA,CAAAH,CAAA,GAAAG,mBAAA,CAAAH,CAAA,EAAAN,CAAA,gBAAAS,mBAAA,CAAAH,CAAA,EAAAR,CAAA,iCAAAW,mBAAA,CAAAH,CAAA,8DAAAwB,YAAA,YAAAA,aAAA,aAAAC,CAAA,EAAA7B,CAAA,EAAA8B,CAAA,EAAAtB,CAAA;AAAA,SAAAD,oBAAAf,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAH,CAAA,QAAAO,CAAA,GAAAK,MAAA,CAAA0B,cAAA,QAAA/B,CAAA,uBAAAR,CAAA,IAAAQ,CAAA,QAAAO,mBAAA,YAAAyB,mBAAAxC,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAH,CAAA,QAAAC,CAAA,EAAAM,CAAA,GAAAA,CAAA,CAAAR,CAAA,EAAAE,CAAA,IAAA2B,KAAA,EAAAzB,CAAA,EAAAqC,UAAA,GAAAxC,CAAA,EAAAyC,YAAA,GAAAzC,CAAA,EAAA0C,QAAA,GAAA1C,CAAA,MAAAD,CAAA,CAAAE,CAAA,IAAAE,CAAA,YAAAE,CAAA,YAAAA,EAAAJ,CAAA,EAAAE,CAAA,IAAAW,mBAAA,CAAAf,CAAA,EAAAE,CAAA,YAAAF,CAAA,gBAAA4C,OAAA,CAAA1C,CAAA,EAAAE,CAAA,EAAAJ,CAAA,UAAAM,CAAA,aAAAA,CAAA,cAAAA,CAAA,oBAAAS,mBAAA,CAAAf,CAAA,EAAAE,CAAA,EAAAE,CAAA,EAAAH,CAAA;AAAA,SAAA4C,mBAAAzC,CAAA,EAAAH,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAI,CAAA,EAAAe,CAAA,EAAAZ,CAAA,cAAAD,CAAA,GAAAJ,CAAA,CAAAiB,CAAA,EAAAZ,CAAA,GAAAG,CAAA,GAAAJ,CAAA,CAAAqB,KAAA,WAAAzB,CAAA,gBAAAJ,CAAA,CAAAI,CAAA,KAAAI,CAAA,CAAAoB,IAAA,GAAA3B,CAAA,CAAAW,CAAA,IAAAkC,OAAA,CAAAC,OAAA,CAAAnC,CAAA,EAAAoC,IAAA,CAAA9C,CAAA,EAAAI,CAAA;AAAA,SAAA2C,kBAAA7C,CAAA,6BAAAH,CAAA,SAAAD,CAAA,GAAAkD,SAAA,aAAAJ,OAAA,WAAA5C,CAAA,EAAAI,CAAA,QAAAe,CAAA,GAAAjB,CAAA,CAAA+C,KAAA,CAAAlD,CAAA,EAAAD,CAAA,YAAAoD,MAAAhD,CAAA,IAAAyC,kBAAA,CAAAxB,CAAA,EAAAnB,CAAA,EAAAI,CAAA,EAAA8C,KAAA,EAAAC,MAAA,UAAAjD,CAAA,cAAAiD,OAAAjD,CAAA,IAAAyC,kBAAA,CAAAxB,CAAA,EAAAnB,CAAA,EAAAI,CAAA,EAAA8C,KAAA,EAAAC,MAAA,WAAAjD,CAAA,KAAAgD,KAAA;AADsC;AACI;AACE;AACG;AACC;AACJ;AAG5CG,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAM;EAClD,IAAMC,IAAI,GAAGH,gDAAS,CAACI,IAAI,CAAC;IAC1BC,UAAU,EAAE,GAAG;IACfC,SAAS,EAAE;MACTC,MAAM,EAAE;IACV,CAAC;IACDC,SAAS,EAAE;MACTC,OAAO,EAAE;IACX,CAAC;IACD,SAAO;EACT,CAAC,CAAC;AACJ,CAAC,CAAC;AAGFR,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAM;EAClD,IAAMQ,IAAI,GAAGT,QAAQ,CAACU,cAAc,CAAC,qBAAqB,CAAC;EAC3D,IAAMC,YAAY,GAAGX,QAAQ,CAACU,cAAc,CAAC,uBAAuB,CAAC;EACrE,IAAME,WAAW,GAAGZ,QAAQ,CAACU,cAAc,CAAC,sBAAsB,CAAC;EACnE,IAAMG,YAAY,GAAGb,QAAQ,CAACU,cAAc,CAAC,gBAAgB,CAAC;EAE9DD,IAAI,CAACR,gBAAgB,CAAC,QAAQ;IAAA,IAAAa,IAAA,GAAApB,iBAAA,cAAAb,YAAA,GAAAE,CAAA,CAAE,SAAAgC,QAAOtE,CAAC;MAAA,IAAAuE,MAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAC,EAAA;MAAA,OAAAtC,YAAA,GAAAC,CAAA,WAAAsC,QAAA;QAAA,kBAAAA,QAAA,CAAAvE,CAAA;UAAA;YACtCJ,CAAC,CAAC4E,cAAc,CAAC,CAAC;YAEZL,MAAM,GAAG,IAAIM,eAAe,CAAC;cACjCC,GAAG,EAAEvB,QAAQ,CAACU,cAAc,CAAC,YAAY,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC,CAAC;cACvDC,WAAW,EAAEzB,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC,CAAC;cACvEE,WAAW,EAAE1B,QAAQ,CAACU,cAAc,CAAC,oBAAoB,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC,CAAC;cACvEG,KAAK,EAAE3B,QAAQ,CAACU,cAAc,CAAC,cAAc,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC,CAAC;cAC3DI,KAAK,EAAE5B,QAAQ,CAACU,cAAc,CAAC,cAAc,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC,CAAC;cAC3DK,GAAG,EAAE7B,QAAQ,CAACU,cAAc,CAAC,YAAY,CAAC,CAACpC,KAAK;cAChDwD,KAAK,EAAE9B,QAAQ,CAACU,cAAc,CAAC,cAAc,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC,CAAC;cAC3DO,KAAK,EAAE/B,QAAQ,CAACU,cAAc,CAAC,cAAc,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC,CAAC;cAC3DQ,IAAI,EAAEhC,QAAQ,CAACU,cAAc,CAAC,aAAa,CAAC,CAACpC,KAAK,CAACkD,IAAI,CAAC;YAC1D,CAAC,CAAC;YAAAJ,QAAA,CAAA1D,CAAA;YAAA0D,QAAA,CAAAvE,CAAA;YAAA,OAGuBoF,KAAK,kBAAAC,MAAA,CAAkBlB,MAAM,CAACmB,QAAQ,CAAC,CAAC,CAAE,CAAC;UAAA;YAA5DlB,QAAQ,GAAAG,QAAA,CAAAvD,CAAA;YAAA,IACToD,QAAQ,CAACmB,EAAE;cAAAhB,QAAA,CAAAvE,CAAA;cAAA;YAAA;YAAA,MAAQ,IAAIwF,KAAK,CAAC,6BAA6B,CAAC;UAAA;YAAAjB,QAAA,CAAAvE,CAAA;YAAA,OAEzCoE,QAAQ,CAACqB,IAAI,CAAC,CAAC;UAAA;YAAhCpB,QAAQ,GAAAE,QAAA,CAAAvD,CAAA;YAEd+C,WAAW,CAAC2B,SAAS,GAAG,EAAE;YAE1B,IAAIrB,QAAQ,CAACjD,MAAM,KAAK,CAAC,EAAE;cACzB0C,YAAY,CAAC6B,KAAK,CAACC,OAAO,GAAG,MAAM;cACnC5B,YAAY,CAAC2B,KAAK,CAACC,OAAO,GAAG,OAAO;YACtC,CAAC,MAAM;cACL5B,YAAY,CAAC2B,KAAK,CAACC,OAAO,GAAG,MAAM;cACnC9B,YAAY,CAAC6B,KAAK,CAACC,OAAO,GAAG,OAAO;cAEpCvB,QAAQ,CAACwB,OAAO,CAAC,UAAAhF,CAAC,EAAI;gBACpB,IAAMiF,GAAG,GAAG3C,QAAQ,CAAC4C,aAAa,CAAC,IAAI,CAAC;gBACxCD,GAAG,CAACJ,SAAS,wBAAAL,MAAA,CACLxE,CAAC,CAAC6D,GAAG,6BAAAW,MAAA,CACLxE,CAAC,CAAC+D,WAAW,IAAI,EAAE,6BAAAS,MAAA,CACnBxE,CAAC,CAACgE,WAAW,IAAI,EAAE,6BAAAQ,MAAA,CACnBxE,CAAC,CAACiE,KAAK,6BAAAO,MAAA,CACPxE,CAAC,CAACkE,KAAK,6BAAAM,MAAA,CACPxE,CAAC,CAACmE,GAAG,IAAI,EAAE,6BAAAK,MAAA,CACXxE,CAAC,CAACoE,KAAK,IAAI,EAAE,6BAAAI,MAAA,CACbxE,CAAC,CAACqE,KAAK,IAAI,EAAE,6BAAAG,MAAA,CACbxE,CAAC,CAACsE,IAAI,IAAI,EAAE,sBACnB;gBACDpB,WAAW,CAACiC,WAAW,CAACF,GAAG,CAAC;cAC9B,CAAC,CAAC;YACJ;YAACvB,QAAA,CAAAvE,CAAA;YAAA;UAAA;YAAAuE,QAAA,CAAA1D,CAAA;YAAAyD,EAAA,GAAAC,QAAA,CAAAvD,CAAA;YAEDiF,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAA5B,EAAO,CAAC;YACpDR,YAAY,CAAC6B,KAAK,CAACC,OAAO,GAAG,MAAM;YACnC5B,YAAY,CAACmC,WAAW,GAAG,wBAAwB;YACnDnC,YAAY,CAAC2B,KAAK,CAACC,OAAO,GAAG,OAAO;UAAC;YAAA,OAAArB,QAAA,CAAAtD,CAAA;QAAA;MAAA,GAAAiD,OAAA;IAAA,CAExC;IAAA,iBAAAkC,EAAA;MAAA,OAAAnC,IAAA,CAAAlB,KAAA,OAAAD,SAAA;IAAA;EAAA,IAAC;AACJ,CAAC,CAAC,C","sources":["webpack://frontend/./node_modules/gridstack/dist/gridstack.min.css","webpack://frontend/./node_modules/css-loader/dist/runtime/api.js","webpack://frontend/./node_modules/css-loader/dist/runtime/getUrl.js","webpack://frontend/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://frontend/./node_modules/gridstack/dist/dd-base-impl.js","webpack://frontend/./node_modules/gridstack/dist/dd-draggable.js","webpack://frontend/./node_modules/gridstack/dist/dd-droppable.js","webpack://frontend/./node_modules/gridstack/dist/dd-element.js","webpack://frontend/./node_modules/gridstack/dist/dd-gridstack.js","webpack://frontend/./node_modules/gridstack/dist/dd-manager.js","webpack://frontend/./node_modules/gridstack/dist/dd-resizable-handle.js","webpack://frontend/./node_modules/gridstack/dist/dd-resizable.js","webpack://frontend/./node_modules/gridstack/dist/dd-touch.js","webpack://frontend/./node_modules/gridstack/dist/gridstack-engine.js","webpack://frontend/./node_modules/gridstack/dist/gridstack.js","webpack://frontend/./node_modules/gridstack/dist/gridstack.min.css?a2db","webpack://frontend/./node_modules/gridstack/dist/types.js","webpack://frontend/./node_modules/gridstack/dist/utils.js","webpack://frontend/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://frontend/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://frontend/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://frontend/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://frontend/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://frontend/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://frontend/webpack/bootstrap","webpack://frontend/webpack/runtime/compat get default export","webpack://frontend/webpack/runtime/define property getters","webpack://frontend/webpack/runtime/hasOwnProperty shorthand","webpack://frontend/webpack/runtime/make namespace object","webpack://frontend/webpack/runtime/jsonp chunk loading","webpack://frontend/webpack/runtime/nonce","webpack://frontend/./src/app.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../css-loader/dist/runtime/getUrl.js\";\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(\"data:image/svg+xml;utf8,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" stroke=\\\"%23666\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"m10 3 2 2H8l2-2v14l-2-2h4l-2 2\\\"/></svg>\", import.meta.url);\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.grid-stack{position:relative}.grid-stack-rtl{direction:ltr}.grid-stack-rtl>.grid-stack-item{direction:rtl}.grid-stack-placeholder>.placeholder-content{background-color:rgba(0,0,0,.1);margin:0;position:absolute;width:auto;z-index:0!important}.grid-stack>.grid-stack-item{position:absolute;padding:0;top:0;left:0;width:var(--gs-column-width);height:var(--gs-cell-height)}.grid-stack>.grid-stack-item>.grid-stack-item-content{margin:0;position:absolute;width:auto;overflow-x:hidden;overflow-y:auto}.grid-stack>.grid-stack-item.size-to-content:not(.size-to-content-max)>.grid-stack-item-content{overflow-y:hidden}.grid-stack>.grid-stack-item>.grid-stack-item-content,.grid-stack>.grid-stack-placeholder>.placeholder-content{top:var(--gs-item-margin-top);right:var(--gs-item-margin-right);bottom:var(--gs-item-margin-bottom);left:var(--gs-item-margin-left)}.grid-stack-item>.ui-resizable-handle{position:absolute;font-size:.1px;display:block;-ms-touch-action:none;touch-action:none}.grid-stack-item.ui-resizable-autohide>.ui-resizable-handle,.grid-stack-item.ui-resizable-disabled>.ui-resizable-handle{display:none}.grid-stack-item>.ui-resizable-ne,.grid-stack-item>.ui-resizable-nw,.grid-stack-item>.ui-resizable-se,.grid-stack-item>.ui-resizable-sw{background-image:url(${___CSS_LOADER_URL_REPLACEMENT_0___});background-repeat:no-repeat;background-position:center}.grid-stack-item>.ui-resizable-ne{transform:rotate(45deg)}.grid-stack-item>.ui-resizable-sw{transform:rotate(45deg)}.grid-stack-item>.ui-resizable-nw{transform:rotate(-45deg)}.grid-stack-item>.ui-resizable-se{transform:rotate(-45deg)}.grid-stack-item>.ui-resizable-nw{cursor:nw-resize;width:20px;height:20px;top:var(--gs-item-margin-top);left:var(--gs-item-margin-left)}.grid-stack-item>.ui-resizable-n{cursor:n-resize;height:10px;top:var(--gs-item-margin-top);left:25px;right:25px}.grid-stack-item>.ui-resizable-ne{cursor:ne-resize;width:20px;height:20px;top:var(--gs-item-margin-top);right:var(--gs-item-margin-right)}.grid-stack-item>.ui-resizable-e{cursor:e-resize;width:10px;top:15px;bottom:15px;right:var(--gs-item-margin-right)}.grid-stack-item>.ui-resizable-se{cursor:se-resize;width:20px;height:20px;bottom:var(--gs-item-margin-bottom);right:var(--gs-item-margin-right)}.grid-stack-item>.ui-resizable-s{cursor:s-resize;height:10px;left:25px;bottom:var(--gs-item-margin-bottom);right:25px}.grid-stack-item>.ui-resizable-sw{cursor:sw-resize;width:20px;height:20px;bottom:var(--gs-item-margin-bottom);left:var(--gs-item-margin-left)}.grid-stack-item>.ui-resizable-w{cursor:w-resize;width:10px;top:15px;bottom:15px;left:var(--gs-item-margin-left)}.grid-stack-item.ui-draggable-dragging>.ui-resizable-handle{display:none!important}.grid-stack-item.ui-draggable-dragging{will-change:left,top}.grid-stack-item.ui-resizable-resizing{will-change:width,height}.ui-draggable-dragging,.ui-resizable-resizing{z-index:10000}.ui-draggable-dragging>.grid-stack-item-content,.ui-resizable-resizing>.grid-stack-item-content{box-shadow:1px 4px 6px rgba(0,0,0,.2);opacity:.8}.grid-stack-animate,.grid-stack-animate .grid-stack-item{transition:left .3s,top .3s,height .3s,width .3s}.grid-stack-animate .grid-stack-item.grid-stack-placeholder,.grid-stack-animate .grid-stack-item.ui-draggable-dragging,.grid-stack-animate .grid-stack-item.ui-resizable-resizing{transition:left 0s,top 0s,height 0s,width 0s}.grid-stack>.grid-stack-item[gs-y=\"0\"]{top:0}.grid-stack>.grid-stack-item[gs-x=\"0\"]{left:0}`, \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/gridstack/dist/gridstack.min.css\"],\"names\":[],\"mappings\":\"AAAA,YAAY,iBAAiB,CAAC,gBAAgB,aAAa,CAAC,iCAAiC,aAAa,CAAC,6CAA6C,+BAA+B,CAAC,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,mBAAmB,CAAC,6BAA6B,iBAAiB,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,4BAA4B,CAAC,4BAA4B,CAAC,sDAAsD,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC,iBAAiB,CAAC,eAAe,CAAC,gGAAgG,iBAAiB,CAAC,+GAA+G,6BAA6B,CAAC,iCAAiC,CAAC,mCAAmC,CAAC,+BAA+B,CAAC,sCAAsC,iBAAiB,CAAC,cAAc,CAAC,aAAa,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,wHAAwH,YAAY,CAAC,wIAAwI,wDAAwP,CAAC,2BAA2B,CAAC,0BAA0B,CAAC,kCAAkC,uBAAuB,CAAC,kCAAkC,uBAAuB,CAAC,kCAAkC,wBAAwB,CAAC,kCAAkC,wBAAwB,CAAC,kCAAkC,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,6BAA6B,CAAC,+BAA+B,CAAC,iCAAiC,eAAe,CAAC,WAAW,CAAC,6BAA6B,CAAC,SAAS,CAAC,UAAU,CAAC,kCAAkC,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,6BAA6B,CAAC,iCAAiC,CAAC,iCAAiC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,iCAAiC,CAAC,kCAAkC,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,mCAAmC,CAAC,iCAAiC,CAAC,iCAAiC,eAAe,CAAC,WAAW,CAAC,SAAS,CAAC,mCAAmC,CAAC,UAAU,CAAC,kCAAkC,gBAAgB,CAAC,UAAU,CAAC,WAAW,CAAC,mCAAmC,CAAC,+BAA+B,CAAC,iCAAiC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,+BAA+B,CAAC,4DAA4D,sBAAsB,CAAC,uCAAuC,oBAAoB,CAAC,uCAAuC,wBAAwB,CAAC,8CAA8C,aAAa,CAAC,gGAAgG,qCAAqC,CAAC,UAAU,CAAC,yDAAyD,gDAAgD,CAAC,kLAAkL,4CAA4C,CAAC,uCAAuC,KAAK,CAAC,uCAAuC,MAAM\",\"sourcesContent\":[\".grid-stack{position:relative}.grid-stack-rtl{direction:ltr}.grid-stack-rtl>.grid-stack-item{direction:rtl}.grid-stack-placeholder>.placeholder-content{background-color:rgba(0,0,0,.1);margin:0;position:absolute;width:auto;z-index:0!important}.grid-stack>.grid-stack-item{position:absolute;padding:0;top:0;left:0;width:var(--gs-column-width);height:var(--gs-cell-height)}.grid-stack>.grid-stack-item>.grid-stack-item-content{margin:0;position:absolute;width:auto;overflow-x:hidden;overflow-y:auto}.grid-stack>.grid-stack-item.size-to-content:not(.size-to-content-max)>.grid-stack-item-content{overflow-y:hidden}.grid-stack>.grid-stack-item>.grid-stack-item-content,.grid-stack>.grid-stack-placeholder>.placeholder-content{top:var(--gs-item-margin-top);right:var(--gs-item-margin-right);bottom:var(--gs-item-margin-bottom);left:var(--gs-item-margin-left)}.grid-stack-item>.ui-resizable-handle{position:absolute;font-size:.1px;display:block;-ms-touch-action:none;touch-action:none}.grid-stack-item.ui-resizable-autohide>.ui-resizable-handle,.grid-stack-item.ui-resizable-disabled>.ui-resizable-handle{display:none}.grid-stack-item>.ui-resizable-ne,.grid-stack-item>.ui-resizable-nw,.grid-stack-item>.ui-resizable-se,.grid-stack-item>.ui-resizable-sw{background-image:url('data:image/svg+xml;utf8,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" stroke=\\\"%23666\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" stroke-width=\\\"2\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"m10 3 2 2H8l2-2v14l-2-2h4l-2 2\\\"/></svg>');background-repeat:no-repeat;background-position:center}.grid-stack-item>.ui-resizable-ne{transform:rotate(45deg)}.grid-stack-item>.ui-resizable-sw{transform:rotate(45deg)}.grid-stack-item>.ui-resizable-nw{transform:rotate(-45deg)}.grid-stack-item>.ui-resizable-se{transform:rotate(-45deg)}.grid-stack-item>.ui-resizable-nw{cursor:nw-resize;width:20px;height:20px;top:var(--gs-item-margin-top);left:var(--gs-item-margin-left)}.grid-stack-item>.ui-resizable-n{cursor:n-resize;height:10px;top:var(--gs-item-margin-top);left:25px;right:25px}.grid-stack-item>.ui-resizable-ne{cursor:ne-resize;width:20px;height:20px;top:var(--gs-item-margin-top);right:var(--gs-item-margin-right)}.grid-stack-item>.ui-resizable-e{cursor:e-resize;width:10px;top:15px;bottom:15px;right:var(--gs-item-margin-right)}.grid-stack-item>.ui-resizable-se{cursor:se-resize;width:20px;height:20px;bottom:var(--gs-item-margin-bottom);right:var(--gs-item-margin-right)}.grid-stack-item>.ui-resizable-s{cursor:s-resize;height:10px;left:25px;bottom:var(--gs-item-margin-bottom);right:25px}.grid-stack-item>.ui-resizable-sw{cursor:sw-resize;width:20px;height:20px;bottom:var(--gs-item-margin-bottom);left:var(--gs-item-margin-left)}.grid-stack-item>.ui-resizable-w{cursor:w-resize;width:10px;top:15px;bottom:15px;left:var(--gs-item-margin-left)}.grid-stack-item.ui-draggable-dragging>.ui-resizable-handle{display:none!important}.grid-stack-item.ui-draggable-dragging{will-change:left,top}.grid-stack-item.ui-resizable-resizing{will-change:width,height}.ui-draggable-dragging,.ui-resizable-resizing{z-index:10000}.ui-draggable-dragging>.grid-stack-item-content,.ui-resizable-resizing>.grid-stack-item-content{box-shadow:1px 4px 6px rgba(0,0,0,.2);opacity:.8}.grid-stack-animate,.grid-stack-animate .grid-stack-item{transition:left .3s,top .3s,height .3s,width .3s}.grid-stack-animate .grid-stack-item.grid-stack-placeholder,.grid-stack-animate .grid-stack-item.ui-draggable-dragging,.grid-stack-animate .grid-stack-item.ui-resizable-resizing{transition:left 0s,top 0s,height 0s,width 0s}.grid-stack>.grid-stack-item[gs-y=\\\"0\\\"]{top:0}.grid-stack>.grid-stack-item[gs-x=\\\"0\\\"]{left:0}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^['\"].*['\"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/[\"'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return \"\\\"\".concat(url.replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\"), \"\\\"\");\n  }\n  return url;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","/**\n * dd-base-impl.ts 12.2.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\nexport class DDBaseImplement {\n    constructor() {\n        /** @internal */\n        this._eventRegister = {};\n    }\n    /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n    get disabled() { return this._disabled; }\n    on(event, callback) {\n        this._eventRegister[event] = callback;\n    }\n    off(event) {\n        delete this._eventRegister[event];\n    }\n    enable() {\n        this._disabled = false;\n    }\n    disable() {\n        this._disabled = true;\n    }\n    destroy() {\n        delete this._eventRegister;\n    }\n    triggerEvent(eventName, event) {\n        if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n            return this._eventRegister[eventName](event);\n    }\n}\n//# sourceMappingURL=dd-base-impl.js.map","/**\n * dd-draggable.ts 12.2.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement } from './dd-base-impl';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n// let count = 0; // TEST\nclass DDDraggable extends DDBaseImplement {\n    constructor(el, option = {}) {\n        super();\n        this.el = el;\n        this.option = option;\n        /** @internal */\n        this.dragTransform = {\n            xScale: 1,\n            yScale: 1,\n            xOffset: 0,\n            yOffset: 0\n        };\n        // get the element that is actually supposed to be dragged by\n        const handleName = option?.handle?.substring(1);\n        const n = el.gridstackNode;\n        this.dragEls = !handleName || el.classList.contains(handleName) ? [el] : (n?.subGrid ? [el.querySelector(option.handle) || el] : Array.from(el.querySelectorAll(option.handle)));\n        if (this.dragEls.length === 0) {\n            this.dragEls = [el];\n        }\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseDown = this._mouseDown.bind(this);\n        this._mouseMove = this._mouseMove.bind(this);\n        this._mouseUp = this._mouseUp.bind(this);\n        this._keyEvent = this._keyEvent.bind(this);\n        this.enable();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        if (this.disabled === false)\n            return;\n        super.enable();\n        this.dragEls.forEach(dragEl => {\n            dragEl.addEventListener('mousedown', this._mouseDown);\n            if (isTouch) {\n                dragEl.addEventListener('touchstart', touchstart);\n                dragEl.addEventListener('pointerdown', pointerdown);\n                // dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n            }\n        });\n        this.el.classList.remove('ui-draggable-disabled');\n    }\n    disable(forDestroy = false) {\n        if (this.disabled === true)\n            return;\n        super.disable();\n        this.dragEls.forEach(dragEl => {\n            dragEl.removeEventListener('mousedown', this._mouseDown);\n            if (isTouch) {\n                dragEl.removeEventListener('touchstart', touchstart);\n                dragEl.removeEventListener('pointerdown', pointerdown);\n            }\n        });\n        if (!forDestroy)\n            this.el.classList.add('ui-draggable-disabled');\n    }\n    destroy() {\n        if (this.dragTimeout)\n            window.clearTimeout(this.dragTimeout);\n        delete this.dragTimeout;\n        if (this.mouseDownEvent)\n            this._mouseUp(this.mouseDownEvent);\n        this.disable(true);\n        delete this.el;\n        delete this.helper;\n        delete this.option;\n        super.destroy();\n    }\n    updateOption(opts) {\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n        return this;\n    }\n    /** @internal call when mouse goes down before a dragstart happens */\n    _mouseDown(e) {\n        // don't let more than one widget handle mouseStart\n        if (DDManager.mouseHandled)\n            return;\n        if (e.button !== 0)\n            return true; // only left click\n        // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n        if (!this.dragEls.find(el => el === e.target) && e.target.closest(skipMouseDown))\n            return true;\n        if (this.option.cancel) {\n            if (e.target.closest(this.option.cancel))\n                return true;\n        }\n        this.mouseDownEvent = e;\n        delete this.dragging;\n        delete DDManager.dragElement;\n        delete DDManager.dropElement;\n        // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n        document.addEventListener('mousemove', this._mouseMove, { capture: true, passive: true }); // true=capture, not bubble\n        document.addEventListener('mouseup', this._mouseUp, true);\n        if (isTouch) {\n            e.currentTarget.addEventListener('touchmove', touchmove);\n            e.currentTarget.addEventListener('touchend', touchend);\n        }\n        e.preventDefault();\n        // preventDefault() prevents blur event which occurs just after mousedown event.\n        // if an editable content has focus, then blur must be call\n        if (document.activeElement)\n            document.activeElement.blur();\n        DDManager.mouseHandled = true;\n        return true;\n    }\n    /** @internal method to call actual drag event */\n    _callDrag(e) {\n        if (!this.dragging)\n            return;\n        const ev = Utils.initEvent(e, { target: this.el, type: 'drag' });\n        if (this.option.drag) {\n            this.option.drag(ev, this.ui());\n        }\n        this.triggerEvent('drag', ev);\n    }\n    /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n    _mouseMove(e) {\n        // console.log(`${count++} move ${e.x},${e.y}`)\n        const s = this.mouseDownEvent;\n        this.lastDrag = e;\n        if (this.dragging) {\n            this._dragFollow(e);\n            // delay actual grid handling drag until we pause for a while if set\n            if (DDManager.pauseDrag) {\n                const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag : 100;\n                if (this.dragTimeout)\n                    window.clearTimeout(this.dragTimeout);\n                this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n            }\n            else {\n                this._callDrag(e);\n            }\n        }\n        else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n            /**\n             * don't start unless we've moved at least 3 pixels\n             */\n            this.dragging = true;\n            DDManager.dragElement = this;\n            // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n            const grid = this.el.gridstackNode?.grid;\n            if (grid) {\n                DDManager.dropElement = grid.el.ddElement.ddDroppable;\n            }\n            else {\n                delete DDManager.dropElement;\n            }\n            this.helper = this._createHelper();\n            this._setupHelperContainmentStyle();\n            this.dragTransform = Utils.getValuesFromTransformedElement(this.helperContainment);\n            this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n            this._setupHelperStyle(e);\n            const ev = Utils.initEvent(e, { target: this.el, type: 'dragstart' });\n            if (this.option.start) {\n                this.option.start(ev, this.ui());\n            }\n            this.triggerEvent('dragstart', ev);\n            // now track keyboard events to cancel or rotate\n            document.addEventListener('keydown', this._keyEvent);\n        }\n        // e.preventDefault(); // passive = true. OLD: was needed otherwise we get text sweep text selection as we drag around\n        return true;\n    }\n    /** @internal call when the mouse gets released to drop the item at current location */\n    _mouseUp(e) {\n        document.removeEventListener('mousemove', this._mouseMove, true);\n        document.removeEventListener('mouseup', this._mouseUp, true);\n        if (isTouch && e.currentTarget) { // destroy() during nested grid call us again wit fake _mouseUp\n            e.currentTarget.removeEventListener('touchmove', touchmove, true);\n            e.currentTarget.removeEventListener('touchend', touchend, true);\n        }\n        if (this.dragging) {\n            delete this.dragging;\n            delete this.el.gridstackNode?._origRotate;\n            document.removeEventListener('keydown', this._keyEvent);\n            // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n            if (DDManager.dropElement?.el === this.el.parentElement) {\n                delete DDManager.dropElement;\n            }\n            this.helperContainment.style.position = this.parentOriginStylePosition || null;\n            if (this.helper !== this.el)\n                this.helper.remove(); // hide now\n            this._removeHelperStyle();\n            const ev = Utils.initEvent(e, { target: this.el, type: 'dragstop' });\n            if (this.option.stop) {\n                this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n            }\n            this.triggerEvent('dragstop', ev);\n            // call the droppable method to receive the item\n            if (DDManager.dropElement) {\n                DDManager.dropElement.drop(e);\n            }\n        }\n        delete this.helper;\n        delete this.mouseDownEvent;\n        delete DDManager.dragElement;\n        delete DDManager.dropElement;\n        delete DDManager.mouseHandled;\n        e.preventDefault();\n    }\n    /** @internal call when keys are being pressed - use Esc to cancel, R to rotate */\n    _keyEvent(e) {\n        const n = this.el.gridstackNode;\n        const grid = n?.grid || DDManager.dropElement?.el?.gridstack;\n        if (e.key === 'Escape') {\n            if (n && n._origRotate) {\n                n._orig = n._origRotate;\n                delete n._origRotate;\n            }\n            grid?.cancelDrag();\n            this._mouseUp(this.mouseDownEvent);\n        }\n        else if (n && grid && (e.key === 'r' || e.key === 'R')) {\n            if (!Utils.canBeRotated(n))\n                return;\n            n._origRotate = n._origRotate || { ...n._orig }; // store the real orig size in case we Esc after doing rotation\n            delete n._moving; // force rotate to happen (move waits for >50% coverage otherwise)\n            grid.setAnimation(false) // immediate rotate so _getDragOffset() gets the right dom size below\n                .rotate(n.el, { top: -this.dragOffset.offsetTop, left: -this.dragOffset.offsetLeft })\n                .setAnimation();\n            n._moving = true;\n            this.dragOffset = this._getDragOffset(this.lastDrag, n.el, this.helperContainment);\n            this.helper.style.width = this.dragOffset.width + 'px';\n            this.helper.style.height = this.dragOffset.height + 'px';\n            Utils.swap(n._orig, 'w', 'h');\n            delete n._rect;\n            this._mouseMove(this.lastDrag);\n        }\n    }\n    /** @internal create a clone copy (or user defined method) of the original drag item if set */\n    _createHelper() {\n        let helper = this.el;\n        if (typeof this.option.helper === 'function') {\n            helper = this.option.helper(this.el);\n        }\n        else if (this.option.helper === 'clone') {\n            helper = Utils.cloneNode(this.el);\n        }\n        if (!helper.parentElement) {\n            Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n        }\n        this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n        return helper;\n    }\n    /** @internal set the fix position of the dragged item */\n    _setupHelperStyle(e) {\n        this.helper.classList.add('ui-draggable-dragging');\n        // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n        const style = this.helper.style;\n        style.pointerEvents = 'none'; // needed for over items to get enter/leave\n        // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (no longer in CSS either as no-op)\n        style.width = this.dragOffset.width + 'px';\n        style.height = this.dragOffset.height + 'px';\n        style.willChange = 'left, top';\n        style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n        this._dragFollow(e); // now position it\n        style.transition = 'none'; // show up instantly\n        setTimeout(() => {\n            if (this.helper) {\n                style.transition = null; // recover animation\n            }\n        }, 0);\n        return this;\n    }\n    /** @internal restore back the original style before dragging */\n    _removeHelperStyle() {\n        this.helper.classList.remove('ui-draggable-dragging');\n        const node = this.helper?.gridstackNode;\n        // don't bother restoring styles if we're gonna remove anyway...\n        if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n            const helper = this.helper;\n            // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n            // TODO: this also removes resizing animation which doesn't have this issue, but others.\n            // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n            // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n            // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n            const transition = this.dragElementOriginStyle['transition'] || null;\n            helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n            DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n            setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n        }\n        delete this.dragElementOriginStyle;\n        return this;\n    }\n    /** @internal updates the top/left position to follow the mouse */\n    _dragFollow(e) {\n        const containmentRect = { left: 0, top: 0 };\n        // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n        //   const { left, top } = this.helperContainment.getBoundingClientRect();\n        //   containmentRect = { left, top };\n        // }\n        const style = this.helper.style;\n        const offset = this.dragOffset;\n        style.left = (e.clientX + offset.offsetLeft - containmentRect.left) * this.dragTransform.xScale + 'px';\n        style.top = (e.clientY + offset.offsetTop - containmentRect.top) * this.dragTransform.yScale + 'px';\n    }\n    /** @internal */\n    _setupHelperContainmentStyle() {\n        this.helperContainment = this.helper.parentElement;\n        if (this.helper.style.position !== 'fixed') {\n            this.parentOriginStylePosition = this.helperContainment.style.position;\n            if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n                this.helperContainment.style.position = 'relative';\n            }\n        }\n        return this;\n    }\n    /** @internal */\n    _getDragOffset(event, el, parent) {\n        // in case ancestor has transform/perspective css properties that change the viewpoint\n        let xformOffsetX = 0;\n        let xformOffsetY = 0;\n        if (parent) {\n            xformOffsetX = this.dragTransform.xOffset;\n            xformOffsetY = this.dragTransform.yOffset;\n        }\n        const targetOffset = el.getBoundingClientRect();\n        return {\n            left: targetOffset.left,\n            top: targetOffset.top,\n            offsetLeft: -event.clientX + targetOffset.left - xformOffsetX,\n            offsetTop: -event.clientY + targetOffset.top - xformOffsetY,\n            width: targetOffset.width * this.dragTransform.xScale,\n            height: targetOffset.height * this.dragTransform.yScale\n        };\n    }\n    /** @internal TODO: set to public as called by DDDroppable! */\n    ui() {\n        const containmentEl = this.el.parentElement;\n        const containmentRect = containmentEl.getBoundingClientRect();\n        const offset = this.helper.getBoundingClientRect();\n        return {\n            position: {\n                top: (offset.top - containmentRect.top) * this.dragTransform.yScale,\n                left: (offset.left - containmentRect.left) * this.dragTransform.xScale\n            }\n            /* not used by GridStack for now...\n            helper: [this.helper], //The object arr representing the helper that's being dragged.\n            offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n            */\n        };\n    }\n}\n/** @internal properties we change during dragging, and restore back */\nDDDraggable.originStyleProp = ['width', 'height', 'transform', 'transform-origin', 'transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\nexport { DDDraggable };\n//# sourceMappingURL=dd-draggable.js.map","/**\n * dd-droppable.ts 12.2.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\n// let count = 0; // TEST\nexport class DDDroppable extends DDBaseImplement {\n    constructor(el, option = {}) {\n        super();\n        this.el = el;\n        this.option = option;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseEnter = this._mouseEnter.bind(this);\n        this._mouseLeave = this._mouseLeave.bind(this);\n        this.enable();\n        this._setupAccept();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        if (this.disabled === false)\n            return;\n        super.enable();\n        this.el.classList.add('ui-droppable');\n        this.el.classList.remove('ui-droppable-disabled');\n        this.el.addEventListener('mouseenter', this._mouseEnter);\n        this.el.addEventListener('mouseleave', this._mouseLeave);\n        if (isTouch) {\n            this.el.addEventListener('pointerenter', pointerenter);\n            this.el.addEventListener('pointerleave', pointerleave);\n        }\n    }\n    disable(forDestroy = false) {\n        if (this.disabled === true)\n            return;\n        super.disable();\n        this.el.classList.remove('ui-droppable');\n        if (!forDestroy)\n            this.el.classList.add('ui-droppable-disabled');\n        this.el.removeEventListener('mouseenter', this._mouseEnter);\n        this.el.removeEventListener('mouseleave', this._mouseLeave);\n        if (isTouch) {\n            this.el.removeEventListener('pointerenter', pointerenter);\n            this.el.removeEventListener('pointerleave', pointerleave);\n        }\n    }\n    destroy() {\n        this.disable(true);\n        this.el.classList.remove('ui-droppable');\n        this.el.classList.remove('ui-droppable-disabled');\n        super.destroy();\n    }\n    updateOption(opts) {\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n        this._setupAccept();\n        return this;\n    }\n    /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n    _mouseEnter(e) {\n        // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n        if (!DDManager.dragElement)\n            return;\n        if (!this._canDrop(DDManager.dragElement.el))\n            return;\n        e.preventDefault();\n        e.stopPropagation();\n        // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n        if (DDManager.dropElement && DDManager.dropElement !== this) {\n            DDManager.dropElement._mouseLeave(e, true); // calledByEnter = true\n        }\n        DDManager.dropElement = this;\n        const ev = Utils.initEvent(e, { target: this.el, type: 'dropover' });\n        if (this.option.over) {\n            this.option.over(ev, this._ui(DDManager.dragElement));\n        }\n        this.triggerEvent('dropover', ev);\n        this.el.classList.add('ui-droppable-over');\n        // console.log('tracking'); // TEST\n    }\n    /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n    _mouseLeave(e, calledByEnter = false) {\n        // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n        if (!DDManager.dragElement || DDManager.dropElement !== this)\n            return;\n        e.preventDefault();\n        e.stopPropagation();\n        const ev = Utils.initEvent(e, { target: this.el, type: 'dropout' });\n        if (this.option.out) {\n            this.option.out(ev, this._ui(DDManager.dragElement));\n        }\n        this.triggerEvent('dropout', ev);\n        if (DDManager.dropElement === this) {\n            delete DDManager.dropElement;\n            // console.log('not tracking'); // TEST\n            // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n            if (!calledByEnter) {\n                let parentDrop;\n                let parent = this.el.parentElement;\n                while (!parentDrop && parent) {\n                    parentDrop = parent.ddElement?.ddDroppable;\n                    parent = parent.parentElement;\n                }\n                if (parentDrop) {\n                    parentDrop._mouseEnter(e);\n                }\n            }\n        }\n    }\n    /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n    drop(e) {\n        e.preventDefault();\n        const ev = Utils.initEvent(e, { target: this.el, type: 'drop' });\n        if (this.option.drop) {\n            this.option.drop(ev, this._ui(DDManager.dragElement));\n        }\n        this.triggerEvent('drop', ev);\n    }\n    /** @internal true if element matches the string/method accept option */\n    _canDrop(el) {\n        return el && (!this.accept || this.accept(el));\n    }\n    /** @internal */\n    _setupAccept() {\n        if (!this.option.accept)\n            return this;\n        if (typeof this.option.accept === 'string') {\n            this.accept = (el) => el.classList.contains(this.option.accept) || el.matches(this.option.accept);\n        }\n        else {\n            this.accept = this.option.accept;\n        }\n        return this;\n    }\n    /** @internal */\n    _ui(drag) {\n        return {\n            draggable: drag.el,\n            ...drag.ui()\n        };\n    }\n}\n//# sourceMappingURL=dd-droppable.js.map","/**\n * dd-elements.ts 12.2.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\nimport { DDResizable } from './dd-resizable';\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nexport class DDElement {\n    static init(el) {\n        if (!el.ddElement) {\n            el.ddElement = new DDElement(el);\n        }\n        return el.ddElement;\n    }\n    constructor(el) {\n        this.el = el;\n    }\n    on(eventName, callback) {\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n            this.ddDraggable.on(eventName, callback);\n        }\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n            this.ddDroppable.on(eventName, callback);\n        }\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n            this.ddResizable.on(eventName, callback);\n        }\n        return this;\n    }\n    off(eventName) {\n        if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n            this.ddDraggable.off(eventName);\n        }\n        else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n            this.ddDroppable.off(eventName);\n        }\n        else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n            this.ddResizable.off(eventName);\n        }\n        return this;\n    }\n    setupDraggable(opts) {\n        if (!this.ddDraggable) {\n            this.ddDraggable = new DDDraggable(this.el, opts);\n        }\n        else {\n            this.ddDraggable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanDraggable() {\n        if (this.ddDraggable) {\n            this.ddDraggable.destroy();\n            delete this.ddDraggable;\n        }\n        return this;\n    }\n    setupResizable(opts) {\n        if (!this.ddResizable) {\n            this.ddResizable = new DDResizable(this.el, opts);\n        }\n        else {\n            this.ddResizable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanResizable() {\n        if (this.ddResizable) {\n            this.ddResizable.destroy();\n            delete this.ddResizable;\n        }\n        return this;\n    }\n    setupDroppable(opts) {\n        if (!this.ddDroppable) {\n            this.ddDroppable = new DDDroppable(this.el, opts);\n        }\n        else {\n            this.ddDroppable.updateOption(opts);\n        }\n        return this;\n    }\n    cleanDroppable() {\n        if (this.ddDroppable) {\n            this.ddDroppable.destroy();\n            delete this.ddDroppable;\n        }\n        return this;\n    }\n}\n//# sourceMappingURL=dd-element.js.map","/**\n * dd-gridstack.ts 12.2.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\nimport { Utils } from './utils';\nimport { DDManager } from './dd-manager';\nimport { DDElement } from './dd-element';\n// let count = 0; // TEST\n/**\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\n */\nexport class DDGridStack {\n    resizable(el, opts, key, value) {\n        this._getDDElements(el, opts).forEach(dEl => {\n            if (opts === 'disable' || opts === 'enable') {\n                dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n            }\n            else if (opts === 'destroy') {\n                dEl.ddResizable && dEl.cleanResizable();\n            }\n            else if (opts === 'option') {\n                dEl.setupResizable({ [key]: value });\n            }\n            else {\n                const n = dEl.el.gridstackNode;\n                const grid = n.grid;\n                let handles = dEl.el.getAttribute('gs-resize-handles') || grid.opts.resizable.handles || 'e,s,se';\n                if (handles === 'all')\n                    handles = 'n,e,s,w,se,sw,ne,nw';\n                // NOTE: keep the resize handles as e,w don't have enough space (10px) to show resize corners anyway. limit during drag instead\n                // restrict vertical resize if height is done to match content anyway... odd to have it spring back\n                // if (Utils.shouldSizeToContent(n, true)) {\n                //   const doE = handles.indexOf('e') !== -1;\n                //   const doW = handles.indexOf('w') !== -1;\n                //   handles = doE ? (doW ? 'e,w' : 'e') : (doW ? 'w' : '');\n                // }\n                const autoHide = !grid.opts.alwaysShowResizeHandle;\n                dEl.setupResizable({\n                    ...grid.opts.resizable,\n                    ...{ handles, autoHide },\n                    ...{\n                        start: opts.start,\n                        stop: opts.stop,\n                        resize: opts.resize\n                    }\n                });\n            }\n        });\n        return this;\n    }\n    draggable(el, opts, key, value) {\n        this._getDDElements(el, opts).forEach(dEl => {\n            if (opts === 'disable' || opts === 'enable') {\n                dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n            }\n            else if (opts === 'destroy') {\n                dEl.ddDraggable && dEl.cleanDraggable();\n            }\n            else if (opts === 'option') {\n                dEl.setupDraggable({ [key]: value });\n            }\n            else {\n                const grid = dEl.el.gridstackNode.grid;\n                dEl.setupDraggable({\n                    ...grid.opts.draggable,\n                    ...{\n                        // containment: (grid.parentGridNode && grid.opts.dragOut === false) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\n                        start: opts.start,\n                        stop: opts.stop,\n                        drag: opts.drag\n                    }\n                });\n            }\n        });\n        return this;\n    }\n    dragIn(el, opts) {\n        this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n        return this;\n    }\n    droppable(el, opts, key, value) {\n        if (typeof opts.accept === 'function' && !opts._accept) {\n            opts._accept = opts.accept;\n            opts.accept = (el) => opts._accept(el);\n        }\n        this._getDDElements(el, opts).forEach(dEl => {\n            if (opts === 'disable' || opts === 'enable') {\n                dEl.ddDroppable && dEl.ddDroppable[opts]();\n            }\n            else if (opts === 'destroy') {\n                dEl.ddDroppable && dEl.cleanDroppable();\n            }\n            else if (opts === 'option') {\n                dEl.setupDroppable({ [key]: value });\n            }\n            else {\n                dEl.setupDroppable(opts);\n            }\n        });\n        return this;\n    }\n    /** true if element is droppable */\n    isDroppable(el) {\n        return !!(el?.ddElement?.ddDroppable && !el.ddElement.ddDroppable.disabled);\n    }\n    /** true if element is draggable */\n    isDraggable(el) {\n        return !!(el?.ddElement?.ddDraggable && !el.ddElement.ddDraggable.disabled);\n    }\n    /** true if element is draggable */\n    isResizable(el) {\n        return !!(el?.ddElement?.ddResizable && !el.ddElement.ddResizable.disabled);\n    }\n    on(el, name, callback) {\n        this._getDDElements(el).forEach(dEl => dEl.on(name, (event) => {\n            callback(event, DDManager.dragElement ? DDManager.dragElement.el : event.target, DDManager.dragElement ? DDManager.dragElement.helper : null);\n        }));\n        return this;\n    }\n    off(el, name) {\n        this._getDDElements(el).forEach(dEl => dEl.off(name));\n        return this;\n    }\n    /** @internal returns a list of DD elements, creating them on the fly by default unless option is to destroy or disable */\n    _getDDElements(els, opts) {\n        // don't force create if we're going to destroy it, unless it's a grid which is used as drop target for it's children\n        const create = els.gridstack || opts !== 'destroy' && opts !== 'disable';\n        const hosts = Utils.getElements(els);\n        if (!hosts.length)\n            return [];\n        const list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null)).filter(d => d); // remove nulls\n        return list;\n    }\n}\n//# sourceMappingURL=dd-gridstack.js.map","/**\n * dd-manager.ts 12.2.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n}\n//# sourceMappingURL=dd-manager.js.map","/**\n * dd-resizable-handle.ts 12.2.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\nclass DDResizableHandle {\n    constructor(host, dir, option) {\n        this.host = host;\n        this.dir = dir;\n        this.option = option;\n        /** @internal true after we've moved enough pixels to start a resize */\n        this.moving = false;\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseDown = this._mouseDown.bind(this);\n        this._mouseMove = this._mouseMove.bind(this);\n        this._mouseUp = this._mouseUp.bind(this);\n        this._keyEvent = this._keyEvent.bind(this);\n        this._init();\n    }\n    /** @internal */\n    _init() {\n        const el = this.el = document.createElement('div');\n        el.classList.add('ui-resizable-handle');\n        el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n        el.style.zIndex = '100';\n        el.style.userSelect = 'none';\n        this.host.appendChild(this.el);\n        this.el.addEventListener('mousedown', this._mouseDown);\n        if (isTouch) {\n            this.el.addEventListener('touchstart', touchstart);\n            this.el.addEventListener('pointerdown', pointerdown);\n            // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n        }\n        return this;\n    }\n    /** call this when resize handle needs to be removed and cleaned up */\n    destroy() {\n        if (this.moving)\n            this._mouseUp(this.mouseDownEvent);\n        this.el.removeEventListener('mousedown', this._mouseDown);\n        if (isTouch) {\n            this.el.removeEventListener('touchstart', touchstart);\n            this.el.removeEventListener('pointerdown', pointerdown);\n        }\n        this.host.removeChild(this.el);\n        delete this.el;\n        delete this.host;\n        return this;\n    }\n    /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n    _mouseDown(e) {\n        this.mouseDownEvent = e;\n        document.addEventListener('mousemove', this._mouseMove, { capture: true, passive: true }); // capture, not bubble\n        document.addEventListener('mouseup', this._mouseUp, true);\n        if (isTouch) {\n            this.el.addEventListener('touchmove', touchmove);\n            this.el.addEventListener('touchend', touchend);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal */\n    _mouseMove(e) {\n        const s = this.mouseDownEvent;\n        if (this.moving) {\n            this._triggerEvent('move', e);\n        }\n        else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n            // don't start unless we've moved at least 3 pixels\n            this.moving = true;\n            this._triggerEvent('start', this.mouseDownEvent);\n            this._triggerEvent('move', e);\n            // now track keyboard events to cancel\n            document.addEventListener('keydown', this._keyEvent);\n        }\n        e.stopPropagation();\n        // e.preventDefault(); passive = true\n    }\n    /** @internal */\n    _mouseUp(e) {\n        if (this.moving) {\n            this._triggerEvent('stop', e);\n            document.removeEventListener('keydown', this._keyEvent);\n        }\n        document.removeEventListener('mousemove', this._mouseMove, true);\n        document.removeEventListener('mouseup', this._mouseUp, true);\n        if (isTouch) {\n            this.el.removeEventListener('touchmove', touchmove);\n            this.el.removeEventListener('touchend', touchend);\n        }\n        delete this.moving;\n        delete this.mouseDownEvent;\n        e.stopPropagation();\n        e.preventDefault();\n    }\n    /** @internal call when keys are being pressed - use Esc to cancel */\n    _keyEvent(e) {\n        if (e.key === 'Escape') {\n            this.host.gridstackNode?.grid?.engine.restoreInitial();\n            this._mouseUp(this.mouseDownEvent);\n        }\n    }\n    /** @internal */\n    _triggerEvent(name, event) {\n        if (this.option[name])\n            this.option[name](event);\n        return this;\n    }\n}\n/** @internal */\nDDResizableHandle.prefix = 'ui-resizable-';\nexport { DDResizableHandle };\n//# sourceMappingURL=dd-resizable-handle.js.map","/**\n * dd-resizable.ts 12.2.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDManager } from './dd-manager';\nclass DDResizable extends DDBaseImplement {\n    // have to be public else complains for HTMLElementExtendOpt ?\n    constructor(el, option = {}) {\n        super();\n        this.el = el;\n        this.option = option;\n        /** @internal */\n        this.rectScale = { x: 1, y: 1 };\n        /** @internal */\n        this._ui = () => {\n            const containmentEl = this.el.parentElement;\n            const containmentRect = containmentEl.getBoundingClientRect();\n            const newRect = {\n                width: this.originalRect.width,\n                height: this.originalRect.height + this.scrolled,\n                left: this.originalRect.left,\n                top: this.originalRect.top - this.scrolled\n            };\n            const rect = this.temporalRect || newRect;\n            return {\n                position: {\n                    left: (rect.left - containmentRect.left) * this.rectScale.x,\n                    top: (rect.top - containmentRect.top) * this.rectScale.y\n                },\n                size: {\n                    width: rect.width * this.rectScale.x,\n                    height: rect.height * this.rectScale.y\n                }\n                /* Gridstack ONLY needs position set above... keep around in case.\n                element: [this.el], // The object representing the element to be resized\n                helper: [], // TODO: not support yet - The object representing the helper that's being resized\n                originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n                originalPosition: { // The position represented as { left, top } before the resizable is resized\n                  left: this.originalRect.left - containmentRect.left,\n                  top: this.originalRect.top - containmentRect.top\n                },\n                originalSize: { // The size represented as { width, height } before the resizable is resized\n                  width: this.originalRect.width,\n                  height: this.originalRect.height\n                }\n                */\n            };\n        };\n        // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n        this._mouseOver = this._mouseOver.bind(this);\n        this._mouseOut = this._mouseOut.bind(this);\n        this.enable();\n        this._setupAutoHide(this.option.autoHide);\n        this._setupHandlers();\n    }\n    on(event, callback) {\n        super.on(event, callback);\n    }\n    off(event) {\n        super.off(event);\n    }\n    enable() {\n        super.enable();\n        this.el.classList.remove('ui-resizable-disabled');\n        this._setupAutoHide(this.option.autoHide);\n    }\n    disable() {\n        super.disable();\n        this.el.classList.add('ui-resizable-disabled');\n        this._setupAutoHide(false);\n    }\n    destroy() {\n        this._removeHandlers();\n        this._setupAutoHide(false);\n        delete this.el;\n        super.destroy();\n    }\n    updateOption(opts) {\n        const updateHandles = (opts.handles && opts.handles !== this.option.handles);\n        const updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n        Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n        if (updateHandles) {\n            this._removeHandlers();\n            this._setupHandlers();\n        }\n        if (updateAutoHide) {\n            this._setupAutoHide(this.option.autoHide);\n        }\n        return this;\n    }\n    /** @internal turns auto hide on/off */\n    _setupAutoHide(auto) {\n        if (auto) {\n            this.el.classList.add('ui-resizable-autohide');\n            // use mouseover and not mouseenter to get better performance and track for nested cases\n            this.el.addEventListener('mouseover', this._mouseOver);\n            this.el.addEventListener('mouseout', this._mouseOut);\n        }\n        else {\n            this.el.classList.remove('ui-resizable-autohide');\n            this.el.removeEventListener('mouseover', this._mouseOver);\n            this.el.removeEventListener('mouseout', this._mouseOut);\n            if (DDManager.overResizeElement === this) {\n                delete DDManager.overResizeElement;\n            }\n        }\n        return this;\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mouseOver(e) {\n        // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n        if (DDManager.overResizeElement || DDManager.dragElement)\n            return;\n        DDManager.overResizeElement = this;\n        // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        this.el.classList.remove('ui-resizable-autohide');\n    }\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _mouseOut(e) {\n        // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        if (DDManager.overResizeElement !== this)\n            return;\n        delete DDManager.overResizeElement;\n        // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n        this.el.classList.add('ui-resizable-autohide');\n    }\n    /** @internal */\n    _setupHandlers() {\n        this.handlers = this.option.handles.split(',')\n            .map(dir => dir.trim())\n            .map(dir => new DDResizableHandle(this.el, dir, {\n            start: (event) => {\n                this._resizeStart(event);\n            },\n            stop: (event) => {\n                this._resizeStop(event);\n            },\n            move: (event) => {\n                this._resizing(event, dir);\n            }\n        }));\n        return this;\n    }\n    /** @internal */\n    _resizeStart(event) {\n        this.sizeToContent = Utils.shouldSizeToContent(this.el.gridstackNode, true); // strick true only and not number\n        this.originalRect = this.el.getBoundingClientRect();\n        this.scrollEl = Utils.getScrollElement(this.el);\n        this.scrollY = this.scrollEl.scrollTop;\n        this.scrolled = 0;\n        this.startEvent = event;\n        this._setupHelper();\n        this._applyChange();\n        const ev = Utils.initEvent(event, { type: 'resizestart', target: this.el });\n        if (this.option.start) {\n            this.option.start(ev, this._ui());\n        }\n        this.el.classList.add('ui-resizable-resizing');\n        this.triggerEvent('resizestart', ev);\n        return this;\n    }\n    /** @internal */\n    _resizing(event, dir) {\n        this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n        this.temporalRect = this._getChange(event, dir);\n        this._applyChange();\n        const ev = Utils.initEvent(event, { type: 'resize', target: this.el });\n        if (this.option.resize) {\n            this.option.resize(ev, this._ui());\n        }\n        this.triggerEvent('resize', ev);\n        return this;\n    }\n    /** @internal */\n    _resizeStop(event) {\n        const ev = Utils.initEvent(event, { type: 'resizestop', target: this.el });\n        // Remove style attr now, so the stop handler can rebuild style attrs\n        this._cleanHelper();\n        if (this.option.stop) {\n            this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n        }\n        this.el.classList.remove('ui-resizable-resizing');\n        this.triggerEvent('resizestop', ev);\n        delete this.startEvent;\n        delete this.originalRect;\n        delete this.temporalRect;\n        delete this.scrollY;\n        delete this.scrolled;\n        return this;\n    }\n    /** @internal */\n    _setupHelper() {\n        this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n        this.parentOriginStylePosition = this.el.parentElement.style.position;\n        const parent = this.el.parentElement;\n        const dragTransform = Utils.getValuesFromTransformedElement(parent);\n        this.rectScale = {\n            x: dragTransform.xScale,\n            y: dragTransform.yScale\n        };\n        if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n            this.el.parentElement.style.position = 'relative';\n        }\n        this.el.style.position = 'absolute';\n        this.el.style.opacity = '0.8';\n        return this;\n    }\n    /** @internal */\n    _cleanHelper() {\n        DDResizable._originStyleProp.forEach((prop, i) => {\n            this.el.style[prop] = this.elOriginStyleVal[i] || null;\n        });\n        this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n        return this;\n    }\n    /** @internal */\n    _getChange(event, dir) {\n        const oEvent = this.startEvent;\n        const newRect = {\n            width: this.originalRect.width,\n            height: this.originalRect.height + this.scrolled,\n            left: this.originalRect.left,\n            top: this.originalRect.top - this.scrolled\n        };\n        const offsetX = event.clientX - oEvent.clientX;\n        const offsetY = this.sizeToContent ? 0 : event.clientY - oEvent.clientY; // prevent vert resize\n        let moveLeft;\n        let moveUp;\n        if (dir.indexOf('e') > -1) {\n            newRect.width += offsetX;\n        }\n        else if (dir.indexOf('w') > -1) {\n            newRect.width -= offsetX;\n            newRect.left += offsetX;\n            moveLeft = true;\n        }\n        if (dir.indexOf('s') > -1) {\n            newRect.height += offsetY;\n        }\n        else if (dir.indexOf('n') > -1) {\n            newRect.height -= offsetY;\n            newRect.top += offsetY;\n            moveUp = true;\n        }\n        const constrain = this._constrainSize(newRect.width, newRect.height, moveLeft, moveUp);\n        if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n            if (dir.indexOf('w') > -1) {\n                newRect.left += newRect.width - constrain.width;\n            }\n            newRect.width = constrain.width;\n        }\n        if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n            if (dir.indexOf('n') > -1) {\n                newRect.top += newRect.height - constrain.height;\n            }\n            newRect.height = constrain.height;\n        }\n        return newRect;\n    }\n    /** @internal constrain the size to the set min/max values */\n    _constrainSize(oWidth, oHeight, moveLeft, moveUp) {\n        const o = this.option;\n        const maxWidth = (moveLeft ? o.maxWidthMoveLeft : o.maxWidth) || Number.MAX_SAFE_INTEGER;\n        const minWidth = o.minWidth / this.rectScale.x || oWidth;\n        const maxHeight = (moveUp ? o.maxHeightMoveUp : o.maxHeight) || Number.MAX_SAFE_INTEGER;\n        const minHeight = o.minHeight / this.rectScale.y || oHeight;\n        const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n        const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n        return { width, height };\n    }\n    /** @internal */\n    _applyChange() {\n        let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n        if (this.el.style.position === 'absolute') {\n            const containmentEl = this.el.parentElement;\n            const { left, top } = containmentEl.getBoundingClientRect();\n            containmentRect = { left, top, width: 0, height: 0 };\n        }\n        if (!this.temporalRect)\n            return this;\n        Object.keys(this.temporalRect).forEach(key => {\n            const value = this.temporalRect[key];\n            const scaleReciprocal = key === 'width' || key === 'left' ? this.rectScale.x : key === 'height' || key === 'top' ? this.rectScale.y : 1;\n            this.el.style[key] = (value - containmentRect[key]) * scaleReciprocal + 'px';\n        });\n        return this;\n    }\n    /** @internal */\n    _removeHandlers() {\n        this.handlers.forEach(handle => handle.destroy());\n        delete this.handlers;\n        return this;\n    }\n}\n/** @internal */\nDDResizable._originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\nexport { DDResizable };\n//# sourceMappingURL=dd-resizable.js.map","/**\n * touch.ts 12.2.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n    ('ontouchstart' in document\n        || 'ontouchstart' in window\n        // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        || (window.DocumentTouch && document instanceof window.DocumentTouch)\n        || navigator.maxTouchPoints > 0\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        || navigator.msMaxTouchPoints > 0);\n// interface TouchCoord {x: number, y: number};\nclass DDTouch {\n}\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e, simulatedType) {\n    // Ignore multi-touch events\n    if (e.touches.length > 1)\n        return;\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n    if (e.cancelable)\n        e.preventDefault();\n    // Dispatch the simulated event to the target element\n    Utils.simulateMouseEvent(e.changedTouches[0], simulatedType);\n}\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e, simulatedType) {\n    // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n    if (e.cancelable)\n        e.preventDefault();\n    // Dispatch the simulated event to the target element\n    Utils.simulateMouseEvent(e, simulatedType);\n}\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e) {\n    // Ignore the event if another widget is already being handled\n    if (DDTouch.touchHandled)\n        return;\n    DDTouch.touchHandled = true;\n    // Simulate the mouse events\n    // simulateMouseEvent(e, 'mouseover');\n    // simulateMouseEvent(e, 'mousemove');\n    simulateMouseEvent(e, 'mousedown');\n}\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e) {\n    // Ignore event if not handled by us\n    if (!DDTouch.touchHandled)\n        return;\n    simulateMouseEvent(e, 'mousemove');\n}\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e) {\n    // Ignore event if not handled\n    if (!DDTouch.touchHandled)\n        return;\n    // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n    if (DDTouch.pointerLeaveTimeout) {\n        window.clearTimeout(DDTouch.pointerLeaveTimeout);\n        delete DDTouch.pointerLeaveTimeout;\n    }\n    const wasDragging = !!DDManager.dragElement;\n    // Simulate the mouseup event\n    simulateMouseEvent(e, 'mouseup');\n    // simulateMouseEvent(event, 'mouseout');\n    // If the touch interaction did not move, it should trigger a click\n    if (!wasDragging) {\n        simulateMouseEvent(e, 'click');\n    }\n    // Unset the flag to allow other widgets to inherit the touch event\n    DDTouch.touchHandled = false;\n}\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e) {\n    // console.log(\"pointer down\")\n    if (e.pointerType === 'mouse')\n        return;\n    e.target.releasePointerCapture(e.pointerId); // <- Important!\n}\nexport function pointerenter(e) {\n    // ignore the initial one we get on pointerdown on ourself\n    if (!DDManager.dragElement) {\n        // console.log('pointerenter ignored');\n        return;\n    }\n    // console.log('pointerenter');\n    if (e.pointerType === 'mouse')\n        return;\n    simulatePointerMouseEvent(e, 'mouseenter');\n}\nexport function pointerleave(e) {\n    // ignore the leave on ourself we get before releasing the mouse over ourself\n    // by delaying sending the event and having the up event cancel us\n    if (!DDManager.dragElement) {\n        // console.log('pointerleave ignored');\n        return;\n    }\n    if (e.pointerType === 'mouse')\n        return;\n    DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n        delete DDTouch.pointerLeaveTimeout;\n        // console.log('pointerleave delayed');\n        simulatePointerMouseEvent(e, 'mouseleave');\n    }, 10);\n}\n//# sourceMappingURL=dd-touch.js.map","/**\n * gridstack-engine.ts 12.2.2\n * Copyright (c) 2021-2024  Alain Dumesny - see GridStack root license\n */\nimport { Utils } from './utils';\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nclass GridStackEngine {\n    constructor(opts = {}) {\n        this.addedNodes = [];\n        this.removedNodes = [];\n        this.defaultColumn = 12;\n        this.column = opts.column || this.defaultColumn;\n        if (this.column > this.defaultColumn)\n            this.defaultColumn = this.column;\n        this.maxRow = opts.maxRow;\n        this._float = opts.float;\n        this.nodes = opts.nodes || [];\n        this.onChange = opts.onChange;\n    }\n    batchUpdate(flag = true, doPack = true) {\n        if (!!this.batchMode === flag)\n            return this;\n        this.batchMode = flag;\n        if (flag) {\n            this._prevFloat = this._float;\n            this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n            this.cleanNodes();\n            this.saveInitial(); // since begin update (which is called multiple times) won't do this\n        }\n        else {\n            this._float = this._prevFloat;\n            delete this._prevFloat;\n            if (doPack)\n                this._packNodes();\n            this._notify();\n        }\n        return this;\n    }\n    // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n    _useEntireRowArea(node, nn) {\n        return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n    }\n    /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n     * return true if we moved. */\n    _fixCollisions(node, nn = node, collide, opt = {}) {\n        this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n        collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n        if (!collide)\n            return false;\n        // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n        if (node._moving && !opt.nested && !this.float) {\n            if (this.swap(node, collide))\n                return true;\n        }\n        // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n        let area = nn;\n        if (!this._loading && this._useEntireRowArea(node, nn)) {\n            area = { x: 0, w: this.column, y: nn.y, h: nn.h };\n            collide = this.collide(node, area, opt.skip); // force new hit\n        }\n        let didMove = false;\n        const newOpt = { nested: true, pack: false };\n        let counter = 0;\n        while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n            if (counter++ > this.nodes.length * 2) {\n                throw new Error(\"Infinite collide check\");\n            }\n            let moved;\n            // if colliding with a locked item OR loading (move after) OR moving down with top gravity (and collide could move up) -> skip past the collide,\n            // but remember that skip down so we only do this once (and push others otherwise).\n            if (collide.locked || this._loading || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n                // can take space we had, or before where we're going\n                (!this.collide(collide, { ...collide, y: node.y }, node) || !this.collide(collide, { ...collide, y: nn.y - collide.h }, node))) {\n                node._skipDown = (node._skipDown || nn.y > node.y);\n                const newNN = { ...nn, y: collide.y + collide.h, ...newOpt };\n                // pretent we moved to where we are now so we can continue any collision checks #2492\n                moved = this._loading && Utils.samePos(node, newNN) ? true : this.moveNode(node, newNN);\n                if ((collide.locked || this._loading) && moved) {\n                    Utils.copyPos(nn, node); // moving after lock become our new desired location\n                }\n                else if (!collide.locked && moved && opt.pack) {\n                    // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n                    this._packNodes();\n                    nn.y = collide.y + collide.h;\n                    Utils.copyPos(node, nn);\n                }\n                didMove = didMove || moved;\n            }\n            else {\n                // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n                moved = this.moveNode(collide, { ...collide, y: nn.y + nn.h, skip: node, ...newOpt });\n            }\n            if (!moved)\n                return didMove; // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n            collide = undefined;\n        }\n        return didMove;\n    }\n    /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n    collide(skip, area = skip, skip2) {\n        const skipId = skip._id;\n        const skip2Id = skip2?._id;\n        return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n    }\n    collideAll(skip, area = skip, skip2) {\n        const skipId = skip._id;\n        const skip2Id = skip2?._id;\n        return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n    }\n    /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n    directionCollideCoverage(node, o, collides) {\n        if (!o.rect || !node._rect)\n            return;\n        const r0 = node._rect; // where started\n        const r = { ...o.rect }; // where we are\n        // update dragged rect to show where it's coming from (above or below, etc...)\n        if (r.y > r0.y) {\n            r.h += r.y - r0.y;\n            r.y = r0.y;\n        }\n        else {\n            r.h += r0.y - r.y;\n        }\n        if (r.x > r0.x) {\n            r.w += r.x - r0.x;\n            r.x = r0.x;\n        }\n        else {\n            r.w += r0.x - r.x;\n        }\n        let collide;\n        let overMax = 0.5; // need >50%\n        for (let n of collides) {\n            if (n.locked || !n._rect) {\n                break;\n            }\n            const r2 = n._rect; // overlapping target\n            let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n            // depending on which side we started from, compute the overlap % of coverage\n            // (ex: from above/below we only compute the max horizontal line coverage)\n            if (r0.y < r2.y) { // from above\n                yOver = ((r.y + r.h) - r2.y) / r2.h;\n            }\n            else if (r0.y + r0.h > r2.y + r2.h) { // from below\n                yOver = ((r2.y + r2.h) - r.y) / r2.h;\n            }\n            if (r0.x < r2.x) { // from the left\n                xOver = ((r.x + r.w) - r2.x) / r2.w;\n            }\n            else if (r0.x + r0.w > r2.x + r2.w) { // from the right\n                xOver = ((r2.x + r2.w) - r.x) / r2.w;\n            }\n            const over = Math.min(xOver, yOver);\n            if (over > overMax) {\n                overMax = over;\n                collide = n;\n            }\n        }\n        o.collide = collide; // save it so we don't have to find it again\n        return collide;\n    }\n    /** does a pixel coverage returning the node that has the most coverage by area */\n    /*\n    protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n      const collide: GridStackNode;\n      const overMax = 0;\n      collides.forEach(n => {\n        if (n.locked || !n._rect) return;\n        const over = Utils.areaIntercept(r, n._rect);\n        if (over > overMax) {\n          overMax = over;\n          collide = n;\n        }\n      });\n      return {collide, over: overMax};\n    }\n    */\n    /** called to cache the nodes pixel rectangles used for collision detection during drag */\n    cacheRects(w, h, top, right, bottom, left) {\n        this.nodes.forEach(n => n._rect = {\n            y: n.y * h + top,\n            x: n.x * w + left,\n            w: n.w * w - left - right,\n            h: n.h * h - top - bottom\n        });\n        return this;\n    }\n    /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n    swap(a, b) {\n        if (!b || b.locked || !a || a.locked)\n            return false;\n        function _doSwap() {\n            const x = b.x, y = b.y;\n            b.x = a.x;\n            b.y = a.y; // b -> a position\n            if (a.h != b.h) {\n                a.x = x;\n                a.y = b.y + b.h; // a -> goes after b\n            }\n            else if (a.w != b.w) {\n                a.x = b.x + b.w;\n                a.y = y; // a -> goes after b\n            }\n            else {\n                a.x = x;\n                a.y = y; // a -> old b position\n            }\n            a._dirty = b._dirty = true;\n            return true;\n        }\n        let touching; // remember if we called it (vs undefined)\n        // same size and same row or column, and touching\n        if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n            return _doSwap();\n        if (touching === false)\n            return; // IFF ran test and fail, bail out\n        // check for taking same columns (but different height) and touching\n        if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n            if (b.y < a.y) {\n                const t = a;\n                a = b;\n                b = t;\n            } // swap a <-> b vars so a is first\n            return _doSwap();\n        }\n        if (touching === false)\n            return;\n        // check if taking same row (but different width) and touching\n        if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n            if (b.x < a.x) {\n                const t = a;\n                a = b;\n                b = t;\n            } // swap a <-> b vars so a is first\n            return _doSwap();\n        }\n        return false;\n    }\n    isAreaEmpty(x, y, w, h) {\n        const nn = { x: x || 0, y: y || 0, w: w || 1, h: h || 1 };\n        return !this.collide(nn);\n    }\n    /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n    compact(layout = 'compact', doSort = true) {\n        if (this.nodes.length === 0)\n            return this;\n        if (doSort)\n            this.sortNodes();\n        const wasBatch = this.batchMode;\n        if (!wasBatch)\n            this.batchUpdate();\n        const wasColumnResize = this._inColumnResize;\n        if (!wasColumnResize)\n            this._inColumnResize = true; // faster addNode()\n        const copyNodes = this.nodes;\n        this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n        copyNodes.forEach((n, index, list) => {\n            let after;\n            if (!n.locked) {\n                n.autoPosition = true;\n                if (layout === 'list' && index)\n                    after = list[index - 1];\n            }\n            this.addNode(n, false, after); // 'false' for add event trigger\n        });\n        if (!wasColumnResize)\n            delete this._inColumnResize;\n        if (!wasBatch)\n            this.batchUpdate(false);\n        return this;\n    }\n    /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n    set float(val) {\n        if (this._float === val)\n            return;\n        this._float = val || false;\n        if (!val) {\n            this._packNodes()._notify();\n        }\n    }\n    /** float getter method */\n    get float() { return this._float || false; }\n    /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n    sortNodes(dir = 1) {\n        this.nodes = Utils.sort(this.nodes, dir);\n        return this;\n    }\n    /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n    _packNodes() {\n        if (this.batchMode) {\n            return this;\n        }\n        this.sortNodes(); // first to last\n        if (this.float) {\n            // restore original Y pos\n            this.nodes.forEach(n => {\n                if (n._updating || n._orig === undefined || n.y === n._orig.y)\n                    return;\n                let newY = n.y;\n                while (newY > n._orig.y) {\n                    --newY;\n                    const collide = this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\n                    if (!collide) {\n                        n._dirty = true;\n                        n.y = newY;\n                    }\n                }\n            });\n        }\n        else {\n            // top gravity pack\n            this.nodes.forEach((n, i) => {\n                if (n.locked)\n                    return;\n                while (n.y > 0) {\n                    const newY = i === 0 ? 0 : n.y - 1;\n                    const canBeMoved = i === 0 || !this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });\n                    if (!canBeMoved)\n                        break;\n                    // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n                    // and move items back. The user 'change' CB should detect changes from the original\n                    // starting position instead.\n                    n._dirty = (n.y !== newY);\n                    n.y = newY;\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * given a random node, makes sure it's coordinates/values are valid in the current grid\n     * @param node to adjust\n     * @param resizing if out of bound, resize down or move into the grid to fit ?\n     */\n    prepareNode(node, resizing) {\n        node._id = node._id ?? GridStackEngine._idSeq++;\n        // make sure USER supplied id are unique in our list, else assign a new one as it will create issues during load/update/etc...\n        const id = node.id;\n        if (id) {\n            let count = 1; // append nice _n rather than some random number\n            while (this.nodes.find(n => n.id === node.id && n !== node)) {\n                node.id = id + '_' + (count++);\n            }\n        }\n        // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n        if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n            node.autoPosition = true;\n        }\n        // assign defaults for missing required fields\n        const defaults = { x: 0, y: 0, w: 1, h: 1 };\n        Utils.defaults(node, defaults);\n        if (!node.autoPosition) {\n            delete node.autoPosition;\n        }\n        if (!node.noResize) {\n            delete node.noResize;\n        }\n        if (!node.noMove) {\n            delete node.noMove;\n        }\n        Utils.sanitizeMinMax(node);\n        // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n        if (typeof node.x == 'string') {\n            node.x = Number(node.x);\n        }\n        if (typeof node.y == 'string') {\n            node.y = Number(node.y);\n        }\n        if (typeof node.w == 'string') {\n            node.w = Number(node.w);\n        }\n        if (typeof node.h == 'string') {\n            node.h = Number(node.h);\n        }\n        if (isNaN(node.x)) {\n            node.x = defaults.x;\n            node.autoPosition = true;\n        }\n        if (isNaN(node.y)) {\n            node.y = defaults.y;\n            node.autoPosition = true;\n        }\n        if (isNaN(node.w)) {\n            node.w = defaults.w;\n        }\n        if (isNaN(node.h)) {\n            node.h = defaults.h;\n        }\n        this.nodeBoundFix(node, resizing);\n        return node;\n    }\n    /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n    nodeBoundFix(node, resizing) {\n        const before = node._orig || Utils.copyPos({}, node);\n        if (node.maxW) {\n            node.w = Math.min(node.w || 1, node.maxW);\n        }\n        if (node.maxH) {\n            node.h = Math.min(node.h || 1, node.maxH);\n        }\n        if (node.minW) {\n            node.w = Math.max(node.w || 1, node.minW);\n        }\n        if (node.minH) {\n            node.h = Math.max(node.h || 1, node.minH);\n        }\n        // if user loaded a larger than allowed widget for current # of columns,\n        // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n        // IFF we're not in the middle of column resizing!\n        const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n        if (saveOrig && this.column < this.defaultColumn && !this._inColumnResize && !this.skipCacheUpdate && node._id != null && this.findCacheLayout(node, this.defaultColumn) === -1) {\n            const copy = { ...node }; // need _id + positions\n            if (copy.autoPosition || copy.x === undefined) {\n                delete copy.x;\n                delete copy.y;\n            }\n            else\n                copy.x = Math.min(this.defaultColumn - 1, copy.x);\n            copy.w = Math.min(this.defaultColumn, copy.w || 1);\n            this.cacheOneLayout(copy, this.defaultColumn);\n        }\n        if (node.w > this.column) {\n            node.w = this.column;\n        }\n        else if (node.w < 1) {\n            node.w = 1;\n        }\n        if (this.maxRow && node.h > this.maxRow) {\n            node.h = this.maxRow;\n        }\n        else if (node.h < 1) {\n            node.h = 1;\n        }\n        if (node.x < 0) {\n            node.x = 0;\n        }\n        if (node.y < 0) {\n            node.y = 0;\n        }\n        if (node.x + node.w > this.column) {\n            if (resizing) {\n                node.w = this.column - node.x;\n            }\n            else {\n                node.x = this.column - node.w;\n            }\n        }\n        if (this.maxRow && node.y + node.h > this.maxRow) {\n            if (resizing) {\n                node.h = this.maxRow - node.y;\n            }\n            else {\n                node.y = this.maxRow - node.h;\n            }\n        }\n        if (!Utils.samePos(node, before)) {\n            node._dirty = true;\n        }\n        return this;\n    }\n    /** returns a list of modified nodes from their original values */\n    getDirtyNodes(verify) {\n        // compare original x,y,w,h instead as _dirty can be a temporary state\n        if (verify) {\n            return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n        }\n        return this.nodes.filter(n => n._dirty);\n    }\n    /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n    _notify(removedNodes) {\n        if (this.batchMode || !this.onChange)\n            return this;\n        const dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n        this.onChange(dirtyNodes);\n        return this;\n    }\n    /** @internal remove dirty and last tried info */\n    cleanNodes() {\n        if (this.batchMode)\n            return this;\n        this.nodes.forEach(n => {\n            delete n._dirty;\n            delete n._lastTried;\n        });\n        return this;\n    }\n    /** @internal called to save initial position/size to track real dirty state.\n     * Note: should be called right after we call change event (so next API is can detect changes)\n     * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n    saveInitial() {\n        this.nodes.forEach(n => {\n            n._orig = Utils.copyPos({}, n);\n            delete n._dirty;\n        });\n        this._hasLocked = this.nodes.some(n => n.locked);\n        return this;\n    }\n    /** @internal restore all the nodes back to initial values (called when we leave) */\n    restoreInitial() {\n        this.nodes.forEach(n => {\n            if (!n._orig || Utils.samePos(n, n._orig))\n                return;\n            Utils.copyPos(n, n._orig);\n            n._dirty = true;\n        });\n        this._notify();\n        return this;\n    }\n    /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n     * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n     * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n     */\n    findEmptyPosition(node, nodeList = this.nodes, column = this.column, after) {\n        const start = after ? after.y * column + (after.x + after.w) : 0;\n        let found = false;\n        for (let i = start; !found; ++i) {\n            const x = i % column;\n            const y = Math.floor(i / column);\n            if (x + node.w > column) {\n                continue;\n            }\n            const box = { x, y, w: node.w, h: node.h };\n            if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n                if (node.x !== x || node.y !== y)\n                    node._dirty = true;\n                node.x = x;\n                node.y = y;\n                delete node.autoPosition;\n                found = true;\n            }\n        }\n        return found;\n    }\n    /** call to add the given node to our list, fixing collision and re-packing */\n    addNode(node, triggerAddEvent = false, after) {\n        const dup = this.nodes.find(n => n._id === node._id);\n        if (dup)\n            return dup; // prevent inserting twice! return it instead.\n        // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n        this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n        delete node._temporaryRemoved;\n        delete node._removeDOM;\n        let skipCollision;\n        if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n            delete node.autoPosition; // found our slot\n            skipCollision = true;\n        }\n        this.nodes.push(node);\n        if (triggerAddEvent) {\n            this.addedNodes.push(node);\n        }\n        if (!skipCollision)\n            this._fixCollisions(node);\n        if (!this.batchMode) {\n            this._packNodes()._notify();\n        }\n        return node;\n    }\n    removeNode(node, removeDOM = true, triggerEvent = false) {\n        if (!this.nodes.find(n => n._id === node._id)) {\n            // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n            return this;\n        }\n        if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n            this.removedNodes.push(node);\n        }\n        if (removeDOM)\n            node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n        // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n        this.nodes = this.nodes.filter(n => n._id !== node._id);\n        if (!node._isAboutToRemove)\n            this._packNodes(); // if dragged out, no need to relayout as already done...\n        this._notify([node]);\n        return this;\n    }\n    removeAll(removeDOM = true, triggerEvent = true) {\n        delete this._layouts;\n        if (!this.nodes.length)\n            return this;\n        removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n        const removedNodes = this.nodes;\n        this.removedNodes = triggerEvent ? removedNodes : [];\n        this.nodes = [];\n        return this._notify(removedNodes);\n    }\n    /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n     * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n     * others in a clone first, then apply those changes if still within specs. */\n    moveNodeCheck(node, o) {\n        // if (node.locked) return false;\n        if (!this.changedPosConstrain(node, o))\n            return false;\n        o.pack = true;\n        // simpler case: move item directly...\n        if (!this.maxRow) {\n            return this.moveNode(node, o);\n        }\n        // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n        let clonedNode;\n        const clone = new GridStackEngine({\n            column: this.column,\n            float: this.float,\n            nodes: this.nodes.map(n => {\n                if (n._id === node._id) {\n                    clonedNode = { ...n };\n                    return clonedNode;\n                }\n                return { ...n };\n            })\n        });\n        if (!clonedNode)\n            return false;\n        // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n        // (case where widget was somehow added past our max #2449)\n        const canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n        // else check if we can force a swap (float=true, or different shapes) on non-resize\n        if (!canMove && !o.resizing && o.collide) {\n            const collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n            if (this.swap(node, collide)) { // swaps and mark dirty\n                this._notify();\n                return true;\n            }\n        }\n        if (!canMove)\n            return false;\n        // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n        // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n        clone.nodes.filter(n => n._dirty).forEach(c => {\n            const n = this.nodes.find(a => a._id === c._id);\n            if (!n)\n                return;\n            Utils.copyPos(n, c);\n            n._dirty = true;\n        });\n        this._notify();\n        return true;\n    }\n    /** return true if can fit in grid height constrain only (always true if no maxRow) */\n    willItFit(node) {\n        delete node._willFitPos;\n        if (!this.maxRow)\n            return true;\n        // create a clone with NO maxRow and check if still within size\n        const clone = new GridStackEngine({\n            column: this.column,\n            float: this.float,\n            nodes: this.nodes.map(n => { return { ...n }; })\n        });\n        const n = { ...node }; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n        this.cleanupNode(n);\n        delete n.el;\n        delete n._id;\n        delete n.content;\n        delete n.grid;\n        clone.addNode(n);\n        if (clone.getRow() <= this.maxRow) {\n            node._willFitPos = Utils.copyPos({}, n);\n            return true;\n        }\n        return false;\n    }\n    /** true if x,y or w,h are different after clamping to min/max */\n    changedPosConstrain(node, p) {\n        // first make sure w,h are set for caller\n        p.w = p.w || node.w;\n        p.h = p.h || node.h;\n        if (node.x !== p.x || node.y !== p.y)\n            return true;\n        // check constrained w,h\n        if (node.maxW) {\n            p.w = Math.min(p.w, node.maxW);\n        }\n        if (node.maxH) {\n            p.h = Math.min(p.h, node.maxH);\n        }\n        if (node.minW) {\n            p.w = Math.max(p.w, node.minW);\n        }\n        if (node.minH) {\n            p.h = Math.max(p.h, node.minH);\n        }\n        return (node.w !== p.w || node.h !== p.h);\n    }\n    /** return true if the passed in node was actually moved (checks for no-op and locked) */\n    moveNode(node, o) {\n        if (!node || /*node.locked ||*/ !o)\n            return false;\n        let wasUndefinedPack;\n        if (o.pack === undefined && !this.batchMode) {\n            wasUndefinedPack = o.pack = true;\n        }\n        // constrain the passed in values and check if we're still changing our node\n        if (typeof o.x !== 'number') {\n            o.x = node.x;\n        }\n        if (typeof o.y !== 'number') {\n            o.y = node.y;\n        }\n        if (typeof o.w !== 'number') {\n            o.w = node.w;\n        }\n        if (typeof o.h !== 'number') {\n            o.h = node.h;\n        }\n        const resizing = (node.w !== o.w || node.h !== o.h);\n        const nn = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n        Utils.copyPos(nn, o);\n        this.nodeBoundFix(nn, resizing);\n        Utils.copyPos(o, nn);\n        if (!o.forceCollide && Utils.samePos(node, o))\n            return false;\n        const prevPos = Utils.copyPos({}, node);\n        // check if we will need to fix collision at our new location\n        const collides = this.collideAll(node, nn, o.skip);\n        let needToMove = true;\n        if (collides.length) {\n            const activeDrag = node._moving && !o.nested;\n            // check to make sure we actually collided over 50% surface area while dragging\n            let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n            // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n            if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n                const over = Utils.areaIntercept(o.rect, collide._rect);\n                const a1 = Utils.area(o.rect);\n                const a2 = Utils.area(collide._rect);\n                const perc = over / (a1 < a2 ? a1 : a2);\n                if (perc > .8) {\n                    collide.grid.makeSubGrid(collide.el, undefined, node);\n                    collide = undefined;\n                }\n            }\n            if (collide) {\n                needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n            }\n            else {\n                needToMove = false; // we didn't cover >50% for a move, skip...\n                if (wasUndefinedPack)\n                    delete o.pack;\n            }\n        }\n        // now move (to the original ask vs the collision version which might differ) and repack things\n        if (needToMove && !Utils.samePos(node, nn)) {\n            node._dirty = true;\n            Utils.copyPos(node, nn);\n        }\n        if (o.pack) {\n            this._packNodes()\n                ._notify();\n        }\n        return !Utils.samePos(node, prevPos); // pack might have moved things back\n    }\n    getRow() {\n        return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n    }\n    beginUpdate(node) {\n        if (!node._updating) {\n            node._updating = true;\n            delete node._skipDown;\n            if (!this.batchMode)\n                this.saveInitial();\n        }\n        return this;\n    }\n    endUpdate() {\n        const n = this.nodes.find(n => n._updating);\n        if (n) {\n            delete n._updating;\n            delete n._skipDown;\n        }\n        return this;\n    }\n    /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n     * returning a list of widgets for serialization */\n    save(saveElement = true, saveCB) {\n        // use the highest layout for any saved info so we can have full detail on reload #1849\n        const len = this._layouts?.length;\n        const layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n        const list = [];\n        this.sortNodes();\n        this.nodes.forEach(n => {\n            const wl = layout?.find(l => l._id === n._id);\n            // use layout info fields instead if set\n            const w = { ...n, ...(wl || {}) };\n            Utils.removeInternalForSave(w, !saveElement);\n            if (saveCB)\n                saveCB(n, w);\n            list.push(w);\n        });\n        return list;\n    }\n    /** @internal called whenever a node is added or moved - updates the cached layouts */\n    layoutsNodesChange(nodes) {\n        if (!this._layouts || this._inColumnResize)\n            return this;\n        // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n        this._layouts.forEach((layout, column) => {\n            if (!layout || column === this.column)\n                return this;\n            if (column < this.column) {\n                this._layouts[column] = undefined;\n            }\n            else {\n                // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n                // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n                const ratio = column / this.column;\n                nodes.forEach(node => {\n                    if (!node._orig)\n                        return; // didn't change (newly added ?)\n                    const n = layout.find(l => l._id === node._id);\n                    if (!n)\n                        return; // no cache for new nodes. Will use those values.\n                    // Y changed, push down same amount\n                    // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n                    if (n.y >= 0 && node.y !== node._orig.y) {\n                        n.y += (node.y - node._orig.y);\n                    }\n                    // X changed, scale from new position\n                    if (node.x !== node._orig.x) {\n                        n.x = Math.round(node.x * ratio);\n                    }\n                    // width changed, scale from new width\n                    if (node.w !== node._orig.w) {\n                        n.w = Math.round(node.w * ratio);\n                    }\n                    // ...height always carries over from cache\n                });\n            }\n        });\n        return this;\n    }\n    /**\n     * @internal Called to scale the widget width & position up/down based on the column change.\n     * Note we store previous layouts (especially original ones) to make it possible to go\n     * from say 12 -> 1 -> 12 and get back to where we were.\n     *\n     * @param prevColumn previous number of columns\n     * @param column  new column number\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\n     * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n     */\n    columnChanged(prevColumn, column, layout = 'moveScale') {\n        if (!this.nodes.length || !column || prevColumn === column)\n            return this;\n        // simpler shortcuts layouts\n        const doCompact = layout === 'compact' || layout === 'list';\n        if (doCompact) {\n            this.sortNodes(1); // sort with original layout once and only once (new column will affect order otherwise)\n        }\n        // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n        if (column < prevColumn)\n            this.cacheLayout(this.nodes, prevColumn);\n        this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n        let newNodes = [];\n        let nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1); // current column reverse sorting so we can insert last to front (limit collision)\n        // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n        // generate next size down from where we are (looks more natural as you gradually size down).\n        if (column > prevColumn && this._layouts) {\n            const cacheNodes = this._layouts[column] || [];\n            // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n            // by pretending we came from that larger column by assigning those values as starting point\n            const lastIndex = this._layouts.length - 1;\n            if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n                prevColumn = lastIndex;\n                this._layouts[lastIndex].forEach(cacheNode => {\n                    const n = nodes.find(n => n._id === cacheNode._id);\n                    if (n) {\n                        // still current, use cache info positions\n                        if (!doCompact && !cacheNode.autoPosition) {\n                            n.x = cacheNode.x ?? n.x;\n                            n.y = cacheNode.y ?? n.y;\n                        }\n                        n.w = cacheNode.w ?? n.w;\n                        if (cacheNode.x == undefined || cacheNode.y === undefined)\n                            n.autoPosition = true;\n                    }\n                });\n            }\n            // if we found cache re-use those nodes that are still current\n            cacheNodes.forEach(cacheNode => {\n                const j = nodes.findIndex(n => n._id === cacheNode._id);\n                if (j !== -1) {\n                    const n = nodes[j];\n                    // still current, use cache info positions\n                    if (doCompact) {\n                        n.w = cacheNode.w; // only w is used, and don't trim the list\n                        return;\n                    }\n                    if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n                        this.findEmptyPosition(cacheNode, newNodes);\n                    }\n                    if (!cacheNode.autoPosition) {\n                        n.x = cacheNode.x ?? n.x;\n                        n.y = cacheNode.y ?? n.y;\n                        n.w = cacheNode.w ?? n.w;\n                        newNodes.push(n);\n                    }\n                    nodes.splice(j, 1);\n                }\n            });\n        }\n        // much simpler layout that just compacts\n        if (doCompact) {\n            this.compact(layout, false);\n        }\n        else {\n            // ...and add any extra non-cached ones\n            if (nodes.length) {\n                if (typeof layout === 'function') {\n                    layout(column, prevColumn, newNodes, nodes);\n                }\n                else {\n                    const ratio = (doCompact || layout === 'none') ? 1 : column / prevColumn;\n                    const move = (layout === 'move' || layout === 'moveScale');\n                    const scale = (layout === 'scale' || layout === 'moveScale');\n                    nodes.forEach(node => {\n                        // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n                        node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n                        node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n                        newNodes.push(node);\n                    });\n                    nodes = [];\n                }\n            }\n            // finally re-layout them in reverse order (to get correct placement)\n            newNodes = Utils.sort(newNodes, -1);\n            this._inColumnResize = true; // prevent cache update\n            this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n            newNodes.forEach(node => {\n                this.addNode(node, false); // 'false' for add event trigger\n                delete node._orig; // make sure the commit doesn't try to restore things back to original\n            });\n        }\n        this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n        this.batchUpdate(false, !doCompact);\n        delete this._inColumnResize;\n        return this;\n    }\n    /**\n     * call to cache the given layout internally to the given location so we can restore back when column changes size\n     * @param nodes list of nodes\n     * @param column corresponding column index to save it under\n     * @param clear if true, will force other caches to be removed (default false)\n     */\n    cacheLayout(nodes, column, clear = false) {\n        const copy = [];\n        nodes.forEach((n, i) => {\n            // make sure we have an id in case this is new layout, else re-use id already set\n            if (n._id === undefined) {\n                const existing = n.id ? this.nodes.find(n2 => n2.id === n.id) : undefined; // find existing node using users id\n                n._id = existing?._id ?? GridStackEngine._idSeq++;\n            }\n            copy[i] = { x: n.x, y: n.y, w: n.w, _id: n._id }; // only thing we change is x,y,w and id to find it back\n        });\n        this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n        this._layouts[column] = copy;\n        return this;\n    }\n    /**\n     * call to cache the given node layout internally to the given location so we can restore back when column changes size\n     * @param node single node to cache\n     * @param column corresponding column index to save it under\n     */\n    cacheOneLayout(n, column) {\n        n._id = n._id ?? GridStackEngine._idSeq++;\n        const l = { x: n.x, y: n.y, w: n.w, _id: n._id };\n        if (n.autoPosition || n.x === undefined) {\n            delete l.x;\n            delete l.y;\n            if (n.autoPosition)\n                l.autoPosition = true;\n        }\n        this._layouts = this._layouts || [];\n        this._layouts[column] = this._layouts[column] || [];\n        const index = this.findCacheLayout(n, column);\n        if (index === -1)\n            this._layouts[column].push(l);\n        else\n            this._layouts[column][index] = l;\n        return this;\n    }\n    findCacheLayout(n, column) {\n        return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n    }\n    removeNodeFromLayoutCache(n) {\n        if (!this._layouts) {\n            return;\n        }\n        for (let i = 0; i < this._layouts.length; i++) {\n            const index = this.findCacheLayout(n, i);\n            if (index !== -1) {\n                this._layouts[i].splice(index, 1);\n            }\n        }\n    }\n    /** called to remove all internal values but the _id */\n    cleanupNode(node) {\n        for (const prop in node) {\n            if (prop[0] === '_' && prop !== '_id')\n                delete node[prop];\n        }\n        return this;\n    }\n}\n/** @internal unique global internal _id counter */\nGridStackEngine._idSeq = 0;\nexport { GridStackEngine };\n//# sourceMappingURL=gridstack-engine.js.map","/*!\n * GridStack 12.2.2\n * https://gridstackjs.com/\n *\n * Copyright (c) 2021-2024  Alain Dumesny\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\n */\nimport { GridStackEngine } from './gridstack-engine';\nimport { Utils, obsolete } from './utils';\nimport { gridDefaults } from './types';\n/*\n * and include D&D by default\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\n */\nimport { DDGridStack } from './dd-gridstack';\nimport { isTouch } from './dd-touch';\nimport { DDManager } from './dd-manager';\nconst dd = new DDGridStack;\n// export all dependent file as well to make it easier for users to just import the main file\nexport * from './types';\nexport * from './utils';\nexport * from './gridstack-engine';\nexport * from './dd-gridstack';\n/**\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\n * @example\n * <div class=\"grid-stack\">\n *   <div class=\"grid-stack-item\">\n *     <div class=\"grid-stack-item-content\">Item 1</div>\n *   </div>\n * </div>\n */\nclass GridStack {\n    /**\n     * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\n     * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\n     * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\n     * @param options grid options (optional)\n     * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\n     *\n     * @example\n     * const grid = GridStack.init();\n     *\n     * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\n     * const grid = document.querySelector('.grid-stack').gridstack;\n     */\n    static init(options = {}, elOrString = '.grid-stack') {\n        if (typeof document === 'undefined')\n            return null; // temp workaround SSR\n        const el = GridStack.getGridElement(elOrString);\n        if (!el) {\n            if (typeof elOrString === 'string') {\n                console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\n                    '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n            }\n            else {\n                console.error('GridStack.init() no grid element was passed.');\n            }\n            return null;\n        }\n        if (!el.gridstack) {\n            el.gridstack = new GridStack(el, Utils.cloneDeep(options));\n        }\n        return el.gridstack;\n    }\n    /**\n     * Will initialize a list of elements (given a selector) and return an array of grids.\n     * @param options grid options (optional)\n     * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\n     *\n     * @example\n     * const grids = GridStack.initAll();\n     * grids.forEach(...)\n     */\n    static initAll(options = {}, selector = '.grid-stack') {\n        const grids = [];\n        if (typeof document === 'undefined')\n            return grids; // temp workaround SSR\n        GridStack.getGridElements(selector).forEach(el => {\n            if (!el.gridstack) {\n                el.gridstack = new GridStack(el, Utils.cloneDeep(options));\n            }\n            grids.push(el.gridstack);\n        });\n        if (grids.length === 0) {\n            console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\n                '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\n        }\n        return grids;\n    }\n    /**\n     * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\n     * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\n     * JSON serialized data, including options.\n     * @param parent HTML element parent to the grid\n     * @param opt grids options used to initialize the grid, and list of children\n     */\n    static addGrid(parent, opt = {}) {\n        if (!parent)\n            return null;\n        let el = parent;\n        if (el.gridstack) {\n            // already a grid - set option and load data\n            const grid = el.gridstack;\n            if (opt)\n                grid.opts = { ...grid.opts, ...opt };\n            if (opt.children !== undefined)\n                grid.load(opt.children);\n            return grid;\n        }\n        // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\n        const parentIsGrid = parent.classList.contains('grid-stack');\n        if (!parentIsGrid || GridStack.addRemoveCB) {\n            if (GridStack.addRemoveCB) {\n                el = GridStack.addRemoveCB(parent, opt, true, true);\n            }\n            else {\n                el = Utils.createDiv(['grid-stack', opt.class], parent);\n            }\n        }\n        // create grid class and load any children\n        const grid = GridStack.init(opt, el);\n        return grid;\n    }\n    /** call this method to register your engine instead of the default one.\n     * See instead `GridStackOptions.engineClass` if you only need to\n     * replace just one instance.\n     */\n    static registerEngine(engineClass) {\n        GridStack.engineClass = engineClass;\n    }\n    /** @internal create placeholder DIV as needed */\n    get placeholder() {\n        if (!this._placeholder) {\n            this._placeholder = Utils.createDiv([this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass]);\n            const placeholderChild = Utils.createDiv(['placeholder-content'], this._placeholder);\n            if (this.opts.placeholderText) {\n                placeholderChild.textContent = this.opts.placeholderText;\n            }\n        }\n        return this._placeholder;\n    }\n    /**\n     * Construct a grid item from the given element and options\n     * @param el the HTML element tied to this grid after it's been initialized\n     * @param opts grid options - public for classes to access, but use methods to modify!\n     */\n    constructor(el, opts = {}) {\n        this.el = el;\n        this.opts = opts;\n        /** time to wait for animation (if enabled) to be done so content sizing can happen */\n        this.animationDelay = 300 + 10;\n        /** @internal */\n        this._gsEventHandler = {};\n        /** @internal extra row added when dragging at the bottom of the grid */\n        this._extraDragRow = 0;\n        /** @internal meant to store the scale of the active grid */\n        this.dragTransform = { xScale: 1, yScale: 1, xOffset: 0, yOffset: 0 };\n        el.gridstack = this;\n        this.opts = opts = opts || {}; // handles null/undefined/0\n        if (!el.classList.contains('grid-stack')) {\n            this.el.classList.add('grid-stack');\n        }\n        // if row property exists, replace minRow and maxRow instead\n        if (opts.row) {\n            opts.minRow = opts.maxRow = opts.row;\n            delete opts.row;\n        }\n        const rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\n        // flag only valid in sub-grids (handled by parent, not here)\n        if (opts.column === 'auto') {\n            delete opts.column;\n        }\n        // save original setting so we can restore on save\n        if (opts.alwaysShowResizeHandle !== undefined) {\n            opts._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\n        }\n        // cleanup responsive opts (must have columnWidth | breakpoints) then sort breakpoints by size (so we can match during resize)\n        const resp = opts.columnOpts;\n        if (resp) {\n            const bk = resp.breakpoints;\n            if (!resp.columnWidth && !bk?.length) {\n                delete opts.columnOpts;\n            }\n            else {\n                resp.columnMax = resp.columnMax || 12;\n                if (bk?.length > 1)\n                    bk.sort((a, b) => (b.w || 0) - (a.w || 0));\n            }\n        }\n        // elements DOM attributes override any passed options (like CSS style) - merge the two together\n        const defaults = {\n            ...Utils.cloneDeep(gridDefaults),\n            column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\n            minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\n            maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\n            staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\n            sizeToContent: Utils.toBool(el.getAttribute('gs-size-to-content')) || undefined,\n            draggable: {\n                handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\n            },\n            removableOptions: {\n                accept: opts.itemClass || gridDefaults.removableOptions.accept,\n                decline: gridDefaults.removableOptions.decline\n            },\n        };\n        if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\n            defaults.animate = Utils.toBool(el.getAttribute('gs-animate'));\n        }\n        opts = Utils.defaults(opts, defaults);\n        this._initMargin(); // part of settings defaults...\n        // Now check if we're loading into !12 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\n        this.checkDynamicColumn();\n        this._updateColumnVar(opts);\n        if (opts.rtl === 'auto') {\n            opts.rtl = (el.style.direction === 'rtl');\n        }\n        if (opts.rtl) {\n            this.el.classList.add('grid-stack-rtl');\n        }\n        // check if we're been nested, and if so update our style and keep pointer around (used during save)\n        const parentGridItem = this.el.closest('.' + gridDefaults.itemClass);\n        const parentNode = parentGridItem?.gridstackNode;\n        if (parentNode) {\n            parentNode.subGrid = this;\n            this.parentGridNode = parentNode;\n            this.el.classList.add('grid-stack-nested');\n            parentNode.el.classList.add('grid-stack-sub-grid');\n        }\n        this._isAutoCellHeight = (opts.cellHeight === 'auto');\n        if (this._isAutoCellHeight || opts.cellHeight === 'initial') {\n            // make the cell content square initially (will use resize/column event to keep it square)\n            this.cellHeight(undefined);\n        }\n        else {\n            // append unit if any are set\n            if (typeof opts.cellHeight == 'number' && opts.cellHeightUnit && opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\n                opts.cellHeight = opts.cellHeight + opts.cellHeightUnit;\n                delete opts.cellHeightUnit;\n            }\n            const val = opts.cellHeight;\n            delete opts.cellHeight; // force initial cellHeight() call to set the value\n            this.cellHeight(val);\n        }\n        // see if we need to adjust auto-hide\n        if (opts.alwaysShowResizeHandle === 'mobile') {\n            opts.alwaysShowResizeHandle = isTouch;\n        }\n        this._setStaticClass();\n        const engineClass = opts.engineClass || GridStack.engineClass || GridStackEngine;\n        this.engine = new engineClass({\n            column: this.getColumn(),\n            float: opts.float,\n            maxRow: opts.maxRow,\n            onChange: (cbNodes) => {\n                cbNodes.forEach(n => {\n                    const el = n.el;\n                    if (!el)\n                        return;\n                    if (n._removeDOM) {\n                        if (el)\n                            el.remove();\n                        delete n._removeDOM;\n                    }\n                    else {\n                        this._writePosAttr(el, n);\n                    }\n                });\n                this._updateContainerHeight();\n            }\n        });\n        if (opts.auto) {\n            this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\n            this.engine._loading = true; // loading collision check\n            this.getGridItems().forEach(el => this._prepareElement(el));\n            delete this.engine._loading;\n            this.batchUpdate(false);\n        }\n        // load any passed in children as well, which overrides any DOM layout done above\n        if (opts.children) {\n            const children = opts.children;\n            delete opts.children;\n            if (children.length)\n                this.load(children); // don't load empty\n        }\n        this.setAnimation();\n        // dynamic grids require pausing during drag to detect over to nest vs push\n        if (opts.subGridDynamic && !DDManager.pauseDrag)\n            DDManager.pauseDrag = true;\n        if (opts.draggable?.pause !== undefined)\n            DDManager.pauseDrag = opts.draggable.pause;\n        this._setupRemoveDrop();\n        this._setupAcceptWidget();\n        this._updateResizeEvent();\n    }\n    _updateColumnVar(opts = this.opts) {\n        this.el.classList.add('gs-' + opts.column);\n        if (typeof opts.column === 'number')\n            this.el.style.setProperty('--gs-column-width', `${100 / opts.column}%`);\n    }\n    /**\n     * add a new widget and returns it.\n     *\n     * Widget will be always placed even if result height is more than actual grid height.\n     * You need to use `willItFit()` before calling addWidget for additional check.\n     * See also `makeWidget(el)` for DOM element.\n     *\n     * @example\n     * const grid = GridStack.init();\n     * grid.addWidget({w: 3, content: 'hello'});\n     *\n     * @param w GridStackWidget definition. used MakeWidget(el) if you have dom element instead.\n     */\n    addWidget(w) {\n        if (typeof w === 'string') {\n            console.error('V11: GridStack.addWidget() does not support string anymore. see #2736');\n            return;\n        }\n        if (w.ELEMENT_NODE) {\n            console.error('V11: GridStack.addWidget() does not support HTMLElement anymore. use makeWidget()');\n            return this.makeWidget(w);\n        }\n        let el;\n        let node = w;\n        node.grid = this;\n        if (node?.el) {\n            el = node.el; // re-use element stored in the node\n        }\n        else if (GridStack.addRemoveCB) {\n            el = GridStack.addRemoveCB(this.el, w, true, false);\n        }\n        else {\n            el = this.createWidgetDivs(node);\n        }\n        if (!el)\n            return;\n        // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\n        node = el.gridstackNode;\n        if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id))\n            return el;\n        // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\n        // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\n        // So make sure we load any DOM attributes that are not specified in passed in options (which override)\n        const domAttr = this._readAttr(el);\n        Utils.defaults(w, domAttr);\n        this.engine.prepareNode(w);\n        // this._writeAttr(el, w); why write possibly incorrect values back when makeWidget() will ?\n        this.el.appendChild(el);\n        this.makeWidget(el, w);\n        return el;\n    }\n    /** create the default grid item divs, and content (possibly lazy loaded) by using GridStack.renderCB() */\n    createWidgetDivs(n) {\n        const el = Utils.createDiv(['grid-stack-item', this.opts.itemClass]);\n        const cont = Utils.createDiv(['grid-stack-item-content'], el);\n        if (Utils.lazyLoad(n)) {\n            if (!n.visibleObservable) {\n                n.visibleObservable = new IntersectionObserver(([entry]) => {\n                    if (entry.isIntersecting) {\n                        n.visibleObservable?.disconnect();\n                        delete n.visibleObservable;\n                        GridStack.renderCB(cont, n);\n                        n.grid?.prepareDragDrop(n.el);\n                    }\n                });\n                window.setTimeout(() => n.visibleObservable?.observe(el)); // wait until callee sets position attributes\n            }\n        }\n        else\n            GridStack.renderCB(cont, n);\n        return el;\n    }\n    /**\n     * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\n     * from the parent's subGrid options.\n     * @param el gridItem element to convert\n     * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\n     * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\n     * @param saveContent if true (default) the html inside .grid-stack-content will be saved to child widget\n     * @returns newly created grid\n     */\n    makeSubGrid(el, ops, nodeToAdd, saveContent = true) {\n        let node = el.gridstackNode;\n        if (!node) {\n            node = this.makeWidget(el).gridstackNode;\n        }\n        if (node.subGrid?.el)\n            return node.subGrid; // already done\n        // find the template subGrid stored on a parent as fallback...\n        let subGridTemplate; // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let grid = this;\n        while (grid && !subGridTemplate) {\n            subGridTemplate = grid.opts?.subGridOpts;\n            grid = grid.parentGridNode?.grid;\n        }\n        //... and set the create options\n        ops = Utils.cloneDeep({\n            // by default sub-grid inherit from us | parent, other than id, children, etc...\n            ...this.opts, id: undefined, children: undefined, column: 'auto', columnOpts: undefined, layout: 'list', subGridOpts: undefined,\n            ...(subGridTemplate || {}),\n            ...(ops || node.subGridOpts || {})\n        });\n        node.subGridOpts = ops;\n        // if column special case it set, remember that flag and set default\n        let autoColumn;\n        if (ops.column === 'auto') {\n            autoColumn = true;\n            ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\n            delete ops.columnOpts; // driven by parent\n        }\n        // if we're converting an existing full item, move over the content to be the first sub item in the new grid\n        let content = node.el.querySelector('.grid-stack-item-content');\n        let newItem;\n        let newItemOpt;\n        if (saveContent) {\n            this._removeDD(node.el); // remove D&D since it's set on content div\n            newItemOpt = { ...node, x: 0, y: 0 };\n            Utils.removeInternalForSave(newItemOpt);\n            delete newItemOpt.subGridOpts;\n            if (node.content) {\n                newItemOpt.content = node.content;\n                delete node.content;\n            }\n            if (GridStack.addRemoveCB) {\n                newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\n            }\n            else {\n                newItem = Utils.createDiv(['grid-stack-item']);\n                newItem.appendChild(content);\n                content = Utils.createDiv(['grid-stack-item-content'], node.el);\n            }\n            this.prepareDragDrop(node.el); // ... and restore original D&D\n        }\n        // if we're adding an additional item, make the container large enough to have them both\n        if (nodeToAdd) {\n            const w = autoColumn ? ops.column : node.w;\n            const h = node.h + nodeToAdd.h;\n            const style = node.el.style;\n            style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\n            this.update(node.el, { w, h });\n            setTimeout(() => style.transition = null); // recover animation\n        }\n        const subGrid = node.subGrid = GridStack.addGrid(content, ops);\n        if (nodeToAdd?._moving)\n            subGrid._isTemp = true; // prevent re-nesting as we add over\n        if (autoColumn)\n            subGrid._autoColumn = true;\n        // add the original content back as a child of hte newly created grid\n        if (saveContent) {\n            subGrid.makeWidget(newItem, newItemOpt);\n        }\n        // now add any additional node\n        if (nodeToAdd) {\n            if (nodeToAdd._moving) {\n                // create an artificial event even for the just created grid to receive this item\n                window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\n            }\n            else {\n                subGrid.makeWidget(node.el, node);\n            }\n        }\n        // if sizedToContent, we need to re-calc the size of ourself\n        this.resizeToContentCheck(false, node);\n        return subGrid;\n    }\n    /**\n     * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\n     * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\n     */\n    removeAsSubGrid(nodeThatRemoved) {\n        const pGrid = this.parentGridNode?.grid;\n        if (!pGrid)\n            return;\n        pGrid.batchUpdate();\n        pGrid.removeWidget(this.parentGridNode.el, true, true);\n        this.engine.nodes.forEach(n => {\n            // migrate any children over and offsetting by our location\n            n.x += this.parentGridNode.x;\n            n.y += this.parentGridNode.y;\n            pGrid.makeWidget(n.el, n);\n        });\n        pGrid.batchUpdate(false);\n        if (this.parentGridNode)\n            delete this.parentGridNode.subGrid;\n        delete this.parentGridNode;\n        // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\n        if (nodeThatRemoved) {\n            window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\n        }\n    }\n    /**\n     * saves the current layout returning a list of widgets for serialization which might include any nested grids.\n     * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\n     * be removed.\n     * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\n     * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\n     * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\n     * @returns list of widgets or full grid option, including .children list of widgets\n     */\n    save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB) {\n        // return copied GridStackWidget (with optionally .el) we can modify at will...\n        const list = this.engine.save(saveContent, saveCB);\n        // check for HTML content and nested grids\n        list.forEach(n => {\n            if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\n                const itemContent = n.el.querySelector('.grid-stack-item-content');\n                n.content = itemContent?.innerHTML;\n                if (!n.content)\n                    delete n.content;\n            }\n            else {\n                if (!saveContent && !saveCB) {\n                    delete n.content;\n                }\n                // check for nested grid\n                if (n.subGrid?.el) {\n                    const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\n                    n.subGridOpts = (saveGridOpt ? listOrOpt : { children: listOrOpt });\n                    delete n.subGrid;\n                }\n            }\n            delete n.el;\n        });\n        // check if save entire grid options (needed for recursive) + children...\n        if (saveGridOpt) {\n            const o = Utils.cloneDeep(this.opts);\n            // delete default values that will be recreated on launch\n            if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\n                o.margin = o.marginTop;\n                delete o.marginTop;\n                delete o.marginRight;\n                delete o.marginBottom;\n                delete o.marginLeft;\n            }\n            if (o.rtl === (this.el.style.direction === 'rtl')) {\n                o.rtl = 'auto';\n            }\n            if (this._isAutoCellHeight) {\n                o.cellHeight = 'auto';\n            }\n            if (this._autoColumn) {\n                o.column = 'auto';\n            }\n            const origShow = o._alwaysShowResizeHandle;\n            delete o._alwaysShowResizeHandle;\n            if (origShow !== undefined) {\n                o.alwaysShowResizeHandle = origShow;\n            }\n            else {\n                delete o.alwaysShowResizeHandle;\n            }\n            Utils.removeInternalAndSame(o, gridDefaults);\n            o.children = list;\n            return o;\n        }\n        return list;\n    }\n    /**\n     * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\n     *\n     * @param items list of widgets definition to update/create\n     * @param addRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\n     * the user control of insertion.\n     *\n     * @example\n     * see http://gridstackjs.com/demo/serialization.html\n     */\n    load(items, addRemove = GridStack.addRemoveCB || true) {\n        items = Utils.cloneDeep(items); // so we can mod\n        const column = this.getColumn();\n        // make sure size 1x1 (default) is present as it may need to override current sizes\n        items.forEach(n => { n.w = n.w || 1; n.h = n.h || 1; });\n        // sort items. those without coord will be appended last\n        items = Utils.sort(items);\n        this.engine.skipCacheUpdate = this._ignoreLayoutsNodeChange = true; // skip layout update\n        // if we're loading a layout into for example 1 column and items don't fit, make sure to save\n        // the original wanted layout so we can scale back up correctly #1471\n        let maxColumn = 0;\n        items.forEach(n => { maxColumn = Math.max(maxColumn, (n.x || 0) + n.w); });\n        if (maxColumn > this.engine.defaultColumn)\n            this.engine.defaultColumn = maxColumn;\n        if (maxColumn > column) {\n            // if we're loading (from empty) into a smaller column, check for special responsive layout\n            if (this.engine.nodes.length === 0 && this.responseLayout) {\n                this.engine.nodes = items;\n                this.engine.columnChanged(maxColumn, column, this.responseLayout);\n                items = this.engine.nodes;\n                this.engine.nodes = [];\n                delete this.responseLayout;\n            }\n            else\n                this.engine.cacheLayout(items, maxColumn, true);\n        }\n        // if given a different callback, temporally set it as global option so creating will use it\n        const prevCB = GridStack.addRemoveCB;\n        if (typeof (addRemove) === 'function')\n            GridStack.addRemoveCB = addRemove;\n        const removed = [];\n        this.batchUpdate();\n        // if we are loading from empty temporarily remove animation\n        const blank = !this.engine.nodes.length;\n        const noAnim = blank && this.opts.animate;\n        if (noAnim)\n            this.setAnimation(false);\n        // see if any items are missing from new layout and need to be removed first\n        if (!blank && addRemove) {\n            const copyNodes = [...this.engine.nodes]; // don't loop through array you modify\n            copyNodes.forEach(n => {\n                if (!n.id)\n                    return;\n                const item = Utils.find(items, n.id);\n                if (!item) {\n                    if (GridStack.addRemoveCB)\n                        GridStack.addRemoveCB(this.el, n, false, false);\n                    removed.push(n); // batch keep track\n                    this.removeWidget(n.el, true, false);\n                }\n            });\n        }\n        // now add/update the widgets - starting with removing items in the new layout we will reposition\n        // to reduce collision and add no-coord ones at next available spot\n        this.engine._loading = true; // help with collision\n        const updateNodes = [];\n        this.engine.nodes = this.engine.nodes.filter(n => {\n            if (Utils.find(items, n.id)) {\n                updateNodes.push(n);\n                return false;\n            } // remove if found from list\n            return true;\n        });\n        items.forEach(w => {\n            const item = Utils.find(updateNodes, w.id);\n            if (item) {\n                // if item sizes to content, re-use the exiting height so it's a better guess at the final size (same if width doesn't change)\n                if (Utils.shouldSizeToContent(item))\n                    w.h = item.h;\n                // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\n                this.engine.nodeBoundFix(w);\n                if (w.autoPosition || w.x === undefined || w.y === undefined) {\n                    w.w = w.w || item.w;\n                    w.h = w.h || item.h;\n                    this.engine.findEmptyPosition(w);\n                }\n                // add back to current list BUT force a collision check if it 'appears' we didn't change to make sure we don't overlap others now\n                this.engine.nodes.push(item);\n                if (Utils.samePos(item, w) && this.engine.nodes.length > 1) {\n                    this.moveNode(item, { ...w, forceCollide: true });\n                    Utils.copyPos(w, item); // use possily updated values before update() is called next (no-op since already moved)\n                }\n                this.update(item.el, w);\n                if (w.subGridOpts?.children) { // update any sub grid as well\n                    const sub = item.el.querySelector('.grid-stack');\n                    if (sub && sub.gridstack) {\n                        sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\n                    }\n                }\n            }\n            else if (addRemove) {\n                this.addWidget(w);\n            }\n        });\n        delete this.engine._loading; // done loading\n        this.engine.removedNodes = removed;\n        this.batchUpdate(false);\n        // after commit, clear that flag\n        delete this._ignoreLayoutsNodeChange;\n        delete this.engine.skipCacheUpdate;\n        prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\n        if (noAnim)\n            this.setAnimation(true, true); // delay adding animation back\n        return this;\n    }\n    /**\n     * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\n     * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\n     */\n    batchUpdate(flag = true) {\n        this.engine.batchUpdate(flag);\n        if (!flag) {\n            this._updateContainerHeight();\n            this._triggerRemoveEvent();\n            this._triggerAddEvent();\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * Gets current cell height.\n     */\n    getCellHeight(forcePixel = false) {\n        if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\n            (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\n            return this.opts.cellHeight;\n        }\n        // do rem/em/cm/mm to px conversion\n        if (this.opts.cellHeightUnit === 'rem') {\n            return this.opts.cellHeight * parseFloat(getComputedStyle(document.documentElement).fontSize);\n        }\n        if (this.opts.cellHeightUnit === 'em') {\n            return this.opts.cellHeight * parseFloat(getComputedStyle(this.el).fontSize);\n        }\n        if (this.opts.cellHeightUnit === 'cm') {\n            // 1cm = 96px/2.54. See https://www.w3.org/TR/css-values-3/#absolute-lengths\n            return this.opts.cellHeight * (96 / 2.54);\n        }\n        if (this.opts.cellHeightUnit === 'mm') {\n            return this.opts.cellHeight * (96 / 2.54) / 10;\n        }\n        // else get first cell height\n        const el = this.el.querySelector('.' + this.opts.itemClass);\n        if (el) {\n            const h = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\n            return Math.round(el.offsetHeight / h);\n        }\n        // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\n        const rows = parseInt(this.el.getAttribute('gs-current-row'));\n        return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight;\n    }\n    /**\n     * Update current cell height - see `GridStackOptions.cellHeight` for format.\n     * This method rebuilds an internal CSS style sheet.\n     * Note: You can expect performance issues if call this method too often.\n     *\n     * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\n     * if pass 0 the CSS will be generated by the application instead.\n     *\n     * @example\n     * grid.cellHeight(100); // same as 100px\n     * grid.cellHeight('70px');\n     * grid.cellHeight(grid.cellWidth() * 1.2);\n     */\n    cellHeight(val) {\n        // if not called internally, check if we're changing mode\n        if (val !== undefined) {\n            if (this._isAutoCellHeight !== (val === 'auto')) {\n                this._isAutoCellHeight = (val === 'auto');\n                this._updateResizeEvent();\n            }\n        }\n        if (val === 'initial' || val === 'auto') {\n            val = undefined;\n        }\n        // make item content be square\n        if (val === undefined) {\n            const marginDiff = -this.opts.marginRight - this.opts.marginLeft\n                + this.opts.marginTop + this.opts.marginBottom;\n            val = this.cellWidth() + marginDiff;\n        }\n        const data = Utils.parseHeight(val);\n        if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\n            return this;\n        }\n        this.opts.cellHeightUnit = data.unit;\n        this.opts.cellHeight = data.h;\n        // finally update var and container\n        this.el.style.setProperty('--gs-cell-height', `${this.opts.cellHeight}${this.opts.cellHeightUnit}`);\n        this._updateContainerHeight();\n        this.resizeToContentCheck();\n        return this;\n    }\n    /** Gets current cell width. */\n    cellWidth() {\n        return this._widthOrContainer() / this.getColumn();\n    }\n    /** return our expected width (or parent) , and optionally of window for dynamic column check */\n    _widthOrContainer(forBreakpoint = false) {\n        // use `offsetWidth` or `clientWidth` (no scrollbar) ?\n        // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\n        return forBreakpoint && this.opts.columnOpts?.breakpointForWindow ? window.innerWidth : (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\n    }\n    /** checks for dynamic column count for our current size, returning true if changed */\n    checkDynamicColumn() {\n        const resp = this.opts.columnOpts;\n        if (!resp || (!resp.columnWidth && !resp.breakpoints?.length))\n            return false;\n        const column = this.getColumn();\n        let newColumn = column;\n        const w = this._widthOrContainer(true);\n        if (resp.columnWidth) {\n            newColumn = Math.min(Math.round(w / resp.columnWidth) || 1, resp.columnMax);\n        }\n        else {\n            // find the closest breakpoint (already sorted big to small) that matches\n            newColumn = resp.columnMax;\n            let i = 0;\n            while (i < resp.breakpoints.length && w <= resp.breakpoints[i].w) {\n                newColumn = resp.breakpoints[i++].c || column;\n            }\n        }\n        if (newColumn !== column) {\n            const bk = resp.breakpoints?.find(b => b.c === newColumn);\n            this.column(newColumn, bk?.layout || resp.layout);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * re-layout grid items to reclaim any empty space. Options are:\n     * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\n     * 'compact' might re-order items to fill any empty space\n     *\n     * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\n     */\n    compact(layout = 'compact', doSort = true) {\n        this.engine.compact(layout, doSort);\n        this._triggerChangeEvent();\n        return this;\n    }\n    /**\n     * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\n     * as well as cache the original layout so you can revert back to previous positions without loss.\n     * @param column - Integer > 0 (default 12).\n     * @param layout specify the type of re-layout that will happen (position, size, etc...).\n     * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\n     */\n    column(column, layout = 'moveScale') {\n        if (!column || column < 1 || this.opts.column === column)\n            return this;\n        const oldColumn = this.getColumn();\n        this.opts.column = column;\n        if (!this.engine) {\n            // called in constructor, noting else to do but remember that breakpoint layout\n            this.responseLayout = layout;\n            return this;\n        }\n        this.engine.column = column;\n        this.el.classList.remove('gs-' + oldColumn);\n        this._updateColumnVar();\n        // update the items now\n        this.engine.columnChanged(oldColumn, column, layout);\n        if (this._isAutoCellHeight)\n            this.cellHeight();\n        this.resizeToContentCheck(true); // wait for width resizing\n        // and trigger our event last...\n        this._ignoreLayoutsNodeChange = true; // skip layout update\n        this._triggerChangeEvent();\n        delete this._ignoreLayoutsNodeChange;\n        return this;\n    }\n    /**\n     * get the number of columns in the grid (default 12)\n     */\n    getColumn() { return this.opts.column; }\n    /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\n    getGridItems() {\n        return Array.from(this.el.children)\n            .filter((el) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass));\n    }\n    /** true if changeCB should be ignored due to column change, sizeToContent, loading, etc... which caller can ignore for dirty flag case */\n    isIgnoreChangeCB() { return this._ignoreLayoutsNodeChange; }\n    /**\n     * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\n     * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\n     */\n    destroy(removeDOM = true) {\n        if (!this.el)\n            return; // prevent multiple calls\n        this.offAll();\n        this._updateResizeEvent(true);\n        this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\n        this.setAnimation(false);\n        if (!removeDOM) {\n            this.removeAll(removeDOM);\n            this.el.removeAttribute('gs-current-row');\n        }\n        else {\n            this.el.parentNode.removeChild(this.el);\n        }\n        if (this.parentGridNode)\n            delete this.parentGridNode.subGrid;\n        delete this.parentGridNode;\n        delete this.opts;\n        delete this._placeholder?.gridstackNode;\n        delete this._placeholder;\n        delete this.engine;\n        delete this.el.gridstack; // remove circular dependency that would prevent a freeing\n        delete this.el;\n        return this;\n    }\n    /**\n     * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\n     */\n    float(val) {\n        if (this.opts.float !== val) {\n            this.opts.float = this.engine.float = val;\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * get the current float mode\n     */\n    getFloat() {\n        return this.engine.float;\n    }\n    /**\n     * Get the position of the cell under a pixel on screen.\n     * @param position the position of the pixel to resolve in\n     * absolute coordinates, as an object with top and left properties\n     * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\n     * Useful when grid is within `position: relative` element\n     *\n     * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\n     */\n    getCellFromPixel(position, useDocRelative = false) {\n        const box = this.el.getBoundingClientRect();\n        // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\n        let containerPos;\n        if (useDocRelative) {\n            containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };\n            // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\n        }\n        else {\n            containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft };\n            // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\n        }\n        const relativeLeft = position.left - containerPos.left;\n        const relativeTop = position.top - containerPos.top;\n        const columnWidth = (box.width / this.getColumn());\n        const rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\n        return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };\n    }\n    /** returns the current number of rows, which will be at least `minRow` if set */\n    getRow() {\n        return Math.max(this.engine.getRow(), this.opts.minRow || 0);\n    }\n    /**\n     * Checks if specified area is empty.\n     * @param x the position x.\n     * @param y the position y.\n     * @param w the width of to check\n     * @param h the height of to check\n     */\n    isAreaEmpty(x, y, w, h) {\n        return this.engine.isAreaEmpty(x, y, w, h);\n    }\n    /**\n     * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\n     * If you want gridstack to add the elements for you, use `addWidget()` instead.\n     * Makes the given element a widget and returns it.\n     * @param els widget or single selector to convert.\n     * @param options widget definition to use instead of reading attributes or using default sizing values\n     *\n     * @example\n     * const grid = GridStack.init();\n     * grid.el.innerHtml = '<div id=\"1\" gs-w=\"3\"></div><div id=\"2\"></div>';\n     * grid.makeWidget('1');\n     * grid.makeWidget('2', {w:2, content: 'hello'});\n     */\n    makeWidget(els, options) {\n        const el = GridStack.getElement(els);\n        if (!el || el.gridstackNode)\n            return el;\n        if (!el.parentElement)\n            this.el.appendChild(el);\n        this._prepareElement(el, true, options);\n        const node = el.gridstackNode;\n        this._updateContainerHeight();\n        // see if there is a sub-grid to create\n        if (node.subGridOpts) {\n            this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\n        }\n        // if we're adding an item into 1 column make sure\n        // we don't override the larger 12 column layout that was already saved. #1985\n        let resetIgnoreLayoutsNodeChange;\n        if (this.opts.column === 1 && !this._ignoreLayoutsNodeChange) {\n            resetIgnoreLayoutsNodeChange = this._ignoreLayoutsNodeChange = true;\n        }\n        this._triggerAddEvent();\n        this._triggerChangeEvent();\n        if (resetIgnoreLayoutsNodeChange)\n            delete this._ignoreLayoutsNodeChange;\n        return el;\n    }\n    on(name, callback) {\n        // check for array of names being passed instead\n        if (name.indexOf(' ') !== -1) {\n            const names = name.split(' ');\n            names.forEach(name => this.on(name, callback));\n            return this;\n        }\n        // native CustomEvent handlers - cash the generic handlers so we can easily remove\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\n            const noData = (name === 'enable' || name === 'disable');\n            if (noData) {\n                this._gsEventHandler[name] = (event) => callback(event);\n            }\n            else {\n                this._gsEventHandler[name] = (event) => { if (event.detail)\n                    callback(event, event.detail); };\n            }\n            this.el.addEventListener(name, this._gsEventHandler[name]);\n        }\n        else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize'\n            || name === 'resizestop' || name === 'dropped' || name === 'resizecontent') {\n            // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\n            // do same for start event to make it easier...\n            this._gsEventHandler[name] = callback;\n        }\n        else {\n            console.error('GridStack.on(' + name + ') event not supported');\n        }\n        return this;\n    }\n    /**\n     * unsubscribe from the 'on' event GridStackEvent\n     * @param name of the event (see possible values) or list of names space separated\n     */\n    off(name) {\n        // check for array of names being passed instead\n        if (name.indexOf(' ') !== -1) {\n            const names = name.split(' ');\n            names.forEach(name => this.off(name));\n            return this;\n        }\n        if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\n            // remove native CustomEvent handlers\n            if (this._gsEventHandler[name]) {\n                this.el.removeEventListener(name, this._gsEventHandler[name]);\n            }\n        }\n        delete this._gsEventHandler[name];\n        return this;\n    }\n    /** remove all event handlers */\n    offAll() {\n        Object.keys(this._gsEventHandler).forEach((key) => this.off(key));\n        return this;\n    }\n    /**\n     * Removes widget from the grid.\n     * @param el  widget or selector to modify\n     * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\n     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\n     */\n    removeWidget(els, removeDOM = true, triggerEvent = true) {\n        if (!els) {\n            console.error('Error: GridStack.removeWidget(undefined) called');\n            return this;\n        }\n        GridStack.getElements(els).forEach(el => {\n            if (el.parentElement && el.parentElement !== this.el)\n                return; // not our child!\n            let node = el.gridstackNode;\n            // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\n            if (!node) {\n                node = this.engine.nodes.find(n => el === n.el);\n            }\n            if (!node)\n                return;\n            if (removeDOM && GridStack.addRemoveCB) {\n                GridStack.addRemoveCB(this.el, node, false, false);\n            }\n            // remove our DOM data (circular link) and drag&drop permanently\n            delete el.gridstackNode;\n            this._removeDD(el);\n            this.engine.removeNode(node, removeDOM, triggerEvent);\n            if (removeDOM && el.parentElement) {\n                el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\n            }\n        });\n        if (triggerEvent) {\n            this._triggerRemoveEvent();\n            this._triggerChangeEvent();\n        }\n        return this;\n    }\n    /**\n     * Removes all widgets from the grid.\n     * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\n     * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\n     */\n    removeAll(removeDOM = true, triggerEvent = true) {\n        // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\n        this.engine.nodes.forEach(n => {\n            if (removeDOM && GridStack.addRemoveCB) {\n                GridStack.addRemoveCB(this.el, n, false, false);\n            }\n            delete n.el.gridstackNode;\n            if (!this.opts.staticGrid)\n                this._removeDD(n.el);\n        });\n        this.engine.removeAll(removeDOM, triggerEvent);\n        if (triggerEvent)\n            this._triggerRemoveEvent();\n        return this;\n    }\n    /**\n     * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\n     * @param doAnimate if true the grid will animate.\n     * @param delay if true setting will be set on next event loop.\n     */\n    setAnimation(doAnimate = this.opts.animate, delay) {\n        if (delay) {\n            // delay, but check to make sure grid (opt) is still around\n            setTimeout(() => { if (this.opts)\n                this.setAnimation(doAnimate); });\n        }\n        else if (doAnimate) {\n            this.el.classList.add('grid-stack-animate');\n        }\n        else {\n            this.el.classList.remove('grid-stack-animate');\n        }\n        this.opts.animate = doAnimate;\n        return this;\n    }\n    /** @internal */\n    hasAnimationCSS() { return this.el.classList.contains('grid-stack-animate'); }\n    /**\n     * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\n     * Also toggle the grid-stack-static class.\n     * @param val if true the grid become static.\n     * @param updateClass true (default) if css class gets updated\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    setStatic(val, updateClass = true, recurse = true) {\n        if (!!this.opts.staticGrid === val)\n            return this;\n        val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\n        this._setupRemoveDrop();\n        this._setupAcceptWidget();\n        this.engine.nodes.forEach(n => {\n            this.prepareDragDrop(n.el); // either delete or init Drag&drop\n            if (n.subGrid && recurse)\n                n.subGrid.setStatic(val, updateClass, recurse);\n        });\n        if (updateClass) {\n            this._setStaticClass();\n        }\n        return this;\n    }\n    /**\n     * Updates the passed in options on the grid (similar to update(widget) for for the grid options).\n     * @param options PARTIAL grid options to update - only items specified will be updated.\n     * NOTE: not all options updating are currently supported (lot of code, unlikely to change)\n     */\n    updateOptions(o) {\n        const opts = this.opts;\n        if (o === opts)\n            return this; // nothing to do\n        if (o.acceptWidgets !== undefined) {\n            opts.acceptWidgets = o.acceptWidgets;\n            this._setupAcceptWidget();\n        }\n        if (o.animate !== undefined)\n            this.setAnimation(o.animate);\n        if (o.cellHeight)\n            this.cellHeight(o.cellHeight);\n        if (o.class !== undefined && o.class !== opts.class) {\n            if (opts.class)\n                this.el.classList.remove(opts.class);\n            if (o.class)\n                this.el.classList.add(o.class);\n        }\n        // responsive column take over actual count (keep what we have now)\n        if (o.columnOpts) {\n            this.opts.columnOpts = o.columnOpts;\n            this.checkDynamicColumn();\n        }\n        else if (o.columnOpts === null && this.opts.columnOpts) {\n            delete this.opts.columnOpts;\n            this._updateResizeEvent();\n        }\n        else if (typeof (o.column) === 'number')\n            this.column(o.column);\n        if (o.margin !== undefined)\n            this.margin(o.margin);\n        if (o.staticGrid !== undefined)\n            this.setStatic(o.staticGrid);\n        if (o.disableDrag !== undefined && !o.staticGrid)\n            this.enableMove(!o.disableDrag);\n        if (o.disableResize !== undefined && !o.staticGrid)\n            this.enableResize(!o.disableResize);\n        if (o.float !== undefined)\n            this.float(o.float);\n        if (o.row !== undefined) {\n            opts.minRow = opts.maxRow = opts.row = o.row;\n            this._updateContainerHeight();\n        }\n        else {\n            if (o.minRow !== undefined) {\n                opts.minRow = o.minRow;\n                this._updateContainerHeight();\n            }\n            if (o.maxRow !== undefined)\n                opts.maxRow = o.maxRow;\n        }\n        if (o.children?.length)\n            this.load(o.children);\n        // TBD if we have a real need for these (more complex code)\n        // alwaysShowResizeHandle, draggable, handle, handleClass, itemClass, layout, placeholderClass, placeholderText, resizable, removable, row,...\n        return this;\n    }\n    /**\n     * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\n     * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\n     * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\n     */\n    update(els, opt) {\n        GridStack.getElements(els).forEach(el => {\n            const n = el?.gridstackNode;\n            if (!n)\n                return;\n            const w = { ...Utils.copyPos({}, n), ...Utils.cloneDeep(opt) }; // make a copy we can modify in case they re-use it or multiple items\n            this.engine.nodeBoundFix(w);\n            delete w.autoPosition;\n            // move/resize widget if anything changed\n            const keys = ['x', 'y', 'w', 'h'];\n            let m;\n            if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\n                m = {};\n                keys.forEach(k => {\n                    m[k] = (w[k] !== undefined) ? w[k] : n[k];\n                    delete w[k];\n                });\n            }\n            // for a move as well IFF there is any min/max fields set\n            if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\n                m = {}; // will use node position but validate values\n            }\n            // check for content changing\n            if (w.content !== undefined) {\n                const itemContent = el.querySelector('.grid-stack-item-content');\n                if (itemContent && itemContent.textContent !== w.content) {\n                    n.content = w.content;\n                    GridStack.renderCB(itemContent, w);\n                    // restore any sub-grid back\n                    if (n.subGrid?.el) {\n                        itemContent.appendChild(n.subGrid.el);\n                        n.subGrid._updateContainerHeight();\n                    }\n                }\n                delete w.content;\n            }\n            // any remaining fields are assigned, but check for dragging changes, resize constrain\n            let changed = false;\n            let ddChanged = false;\n            for (const key in w) {\n                if (key[0] !== '_' && n[key] !== w[key]) {\n                    n[key] = w[key];\n                    changed = true;\n                    ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\n                }\n            }\n            Utils.sanitizeMinMax(n);\n            // finally move the widget and update attr\n            if (m) {\n                const widthChanged = (m.w !== undefined && m.w !== n.w);\n                this.moveNode(n, m);\n                if (widthChanged && n.subGrid) {\n                    // if we're animating the client size hasn't changed yet, so force a change (not exact size)\n                    n.subGrid.onResize(this.hasAnimationCSS() ? n.w : undefined);\n                }\n                else {\n                    this.resizeToContentCheck(widthChanged, n);\n                }\n                delete n._orig; // clear out original position now that we moved #2669\n            }\n            if (m || changed) {\n                this._writeAttr(el, n);\n            }\n            if (ddChanged) {\n                this.prepareDragDrop(n.el);\n            }\n            if (GridStack.updateCB)\n                GridStack.updateCB(n); // call user callback so they know widget got updated\n        });\n        return this;\n    }\n    moveNode(n, m) {\n        const wasUpdating = n._updating;\n        if (!wasUpdating)\n            this.engine.cleanNodes().beginUpdate(n);\n        this.engine.moveNode(n, m);\n        this._updateContainerHeight();\n        if (!wasUpdating) {\n            this._triggerChangeEvent();\n            this.engine.endUpdate();\n        }\n    }\n    /**\n     * Updates widget height to match the content height to avoid v-scrollbar or dead space.\n     * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\n     * @param el grid item element\n     * @param useNodeH set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\n     */\n    resizeToContent(el) {\n        if (!el)\n            return;\n        el.classList.remove('size-to-content-max');\n        if (!el.clientHeight)\n            return; // 0 when hidden, skip\n        const n = el.gridstackNode;\n        if (!n)\n            return;\n        const grid = n.grid;\n        if (!grid || el.parentElement !== grid.el)\n            return; // skip if we are not inside a grid\n        const cell = grid.getCellHeight(true);\n        if (!cell)\n            return;\n        let height = n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\n        let item;\n        if (n.resizeToContentParent)\n            item = el.querySelector(n.resizeToContentParent);\n        if (!item)\n            item = el.querySelector(GridStack.resizeToContentParent);\n        if (!item)\n            return;\n        const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\n        const itemH = n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\n        let wantedH;\n        if (n.subGrid) {\n            // sub-grid - use their actual row count * their cell height, BUT append any content outside of the grid (eg: above text)\n            wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight(true);\n            const subRec = n.subGrid.el.getBoundingClientRect();\n            const parentRec = el.getBoundingClientRect();\n            wantedH += subRec.top - parentRec.top;\n        }\n        else if (n.subGridOpts?.children?.length) {\n            // not sub-grid just yet (case above) wait until we do\n            return;\n        }\n        else {\n            // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\n            const child = item.firstElementChild;\n            if (!child) {\n                console.error(`Error: GridStack.resizeToContent() widget id:${n.id} '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`);\n                return;\n            }\n            wantedH = child.getBoundingClientRect().height || itemH;\n        }\n        if (itemH === wantedH)\n            return;\n        height += wantedH - itemH;\n        let h = Math.ceil(height / cell);\n        // check for min/max and special sizing\n        const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent : 0;\n        if (softMax && h > softMax) {\n            h = softMax;\n            el.classList.add('size-to-content-max'); // get v-scroll back\n        }\n        if (n.minH && h < n.minH)\n            h = n.minH;\n        else if (n.maxH && h > n.maxH)\n            h = n.maxH;\n        if (h !== n.h) {\n            grid._ignoreLayoutsNodeChange = true;\n            grid.moveNode(n, { h });\n            delete grid._ignoreLayoutsNodeChange;\n        }\n    }\n    /** call the user resize (so they can do extra work) else our build in version */\n    resizeToContentCBCheck(el) {\n        if (GridStack.resizeToContentCB)\n            GridStack.resizeToContentCB(el);\n        else\n            this.resizeToContent(el);\n    }\n    /** rotate (by swapping w & h) the passed in node - called when user press 'r' during dragging\n     * @param els  widget or selector of objects to modify\n     * @param relative optional pixel coord relative to upper/left corner to rotate around (will keep that cell under cursor)\n     */\n    rotate(els, relative) {\n        GridStack.getElements(els).forEach(el => {\n            const n = el.gridstackNode;\n            if (!Utils.canBeRotated(n))\n                return;\n            const rot = { w: n.h, h: n.w, minH: n.minW, minW: n.minH, maxH: n.maxW, maxW: n.maxH };\n            // if given an offset, adjust x/y by column/row bounds when user presses 'r' during dragging\n            if (relative) {\n                const pivotX = relative.left > 0 ? Math.floor(relative.left / this.cellWidth()) : 0;\n                const pivotY = relative.top > 0 ? Math.floor(relative.top / this.opts.cellHeight) : 0;\n                rot.x = n.x + pivotX - (n.h - (pivotY + 1));\n                rot.y = (n.y + pivotY) - pivotX;\n            }\n            Object.keys(rot).forEach(k => { if (rot[k] === undefined)\n                delete rot[k]; });\n            const _orig = n._orig;\n            this.update(el, rot);\n            n._orig = _orig; // restore as move() will delete it\n        });\n        return this;\n    }\n    /**\n     * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\n     * @param value margin value\n     */\n    margin(value) {\n        const isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\n        // check if we can skip... won't check if multi values (too much hassle)\n        if (!isMultiValue) {\n            const data = Utils.parseHeight(value);\n            if (this.opts.marginUnit === data.unit && this.opts.margin === data.h)\n                return;\n        }\n        // re-use existing margin handling\n        this.opts.margin = value;\n        this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\n        this._initMargin();\n        return this;\n    }\n    /** returns current margin number value (undefined if 4 sides don't match) */\n    getMargin() { return this.opts.margin; }\n    /**\n     * Returns true if the height of the grid will be less than the vertical\n     * constraint. Always returns true if grid doesn't have height constraint.\n     * @param node contains x,y,w,h,auto-position options\n     *\n     * @example\n     * if (grid.willItFit(newWidget)) {\n     *   grid.addWidget(newWidget);\n     * } else {\n     *   alert('Not enough free space to place the widget');\n     * }\n     */\n    willItFit(node) {\n        // support legacy call for now\n        if (arguments.length > 1) {\n            console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\n            // eslint-disable-next-line prefer-rest-params\n            const a = arguments;\n            let i = 0, w = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++] };\n            return this.willItFit(w);\n        }\n        return this.engine.willItFit(node);\n    }\n    /** @internal */\n    _triggerChangeEvent() {\n        if (this.engine.batchMode)\n            return this;\n        const elements = this.engine.getDirtyNodes(true); // verify they really changed\n        if (elements && elements.length) {\n            if (!this._ignoreLayoutsNodeChange) {\n                this.engine.layoutsNodesChange(elements);\n            }\n            this._triggerEvent('change', elements);\n        }\n        this.engine.saveInitial(); // we called, now reset initial values & dirty flags\n        return this;\n    }\n    /** @internal */\n    _triggerAddEvent() {\n        if (this.engine.batchMode)\n            return this;\n        if (this.engine.addedNodes?.length) {\n            if (!this._ignoreLayoutsNodeChange) {\n                this.engine.layoutsNodesChange(this.engine.addedNodes);\n            }\n            // prevent added nodes from also triggering 'change' event (which is called next)\n            this.engine.addedNodes.forEach(n => { delete n._dirty; });\n            const addedNodes = [...this.engine.addedNodes];\n            this.engine.addedNodes = [];\n            this._triggerEvent('added', addedNodes);\n        }\n        return this;\n    }\n    /** @internal */\n    _triggerRemoveEvent() {\n        if (this.engine.batchMode)\n            return this;\n        if (this.engine.removedNodes?.length) {\n            const removedNodes = [...this.engine.removedNodes];\n            this.engine.removedNodes = [];\n            this._triggerEvent('removed', removedNodes);\n        }\n        return this;\n    }\n    /** @internal */\n    _triggerEvent(type, data) {\n        const event = data ? new CustomEvent(type, { bubbles: false, detail: data }) : new Event(type);\n        // check if we're nested, and if so call the outermost grid to trigger the event\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let grid = this;\n        while (grid.parentGridNode)\n            grid = grid.parentGridNode.grid;\n        grid.el.dispatchEvent(event);\n        return this;\n    }\n    /** @internal */\n    _updateContainerHeight() {\n        if (!this.engine || this.engine.batchMode)\n            return this;\n        const parent = this.parentGridNode;\n        let row = this.getRow() + this._extraDragRow; // this checks for minRow already\n        const cellHeight = this.opts.cellHeight;\n        const unit = this.opts.cellHeightUnit;\n        if (!cellHeight)\n            return this;\n        // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\n        // If `minRow` was applied, don't override it with this check, and avoid performance issues\n        // (reflows) using `getComputedStyle`\n        if (!parent && !this.opts.minRow) {\n            const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)['minHeight']);\n            if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\n                const minRow = Math.floor(cssMinHeight.h / cellHeight);\n                if (row < minRow) {\n                    row = minRow;\n                }\n            }\n        }\n        this.el.setAttribute('gs-current-row', String(row));\n        this.el.style.removeProperty('min-height');\n        this.el.style.removeProperty('height');\n        if (row) {\n            // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\n            this.el.style[parent ? 'minHeight' : 'height'] = row * cellHeight + unit;\n        }\n        // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\n        if (parent && Utils.shouldSizeToContent(parent)) {\n            parent.grid.resizeToContentCBCheck(parent.el);\n        }\n        return this;\n    }\n    /** @internal */\n    _prepareElement(el, triggerAddEvent = false, node) {\n        node = node || this._readAttr(el);\n        el.gridstackNode = node;\n        node.el = el;\n        node.grid = this;\n        node = this.engine.addNode(node, triggerAddEvent);\n        // write the dom sizes and class\n        this._writeAttr(el, node);\n        el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\n        const sizeToContent = Utils.shouldSizeToContent(node);\n        sizeToContent ? el.classList.add('size-to-content') : el.classList.remove('size-to-content');\n        if (sizeToContent)\n            this.resizeToContentCheck(false, node);\n        if (!Utils.lazyLoad(node))\n            this.prepareDragDrop(node.el);\n        return this;\n    }\n    /** @internal write position CSS vars and x,y,w,h attributes (not used for CSS but by users) back to element */\n    _writePosAttr(el, n) {\n        // Avoid overwriting the inline style of the element during drag/resize, but always update the placeholder\n        if ((!n._moving && !n._resizing) || this._placeholder === el) {\n            // width/height:1 x/y:0 is set by default in the main CSS, so no need to set inlined vars\n            el.style.top = n.y ? (n.y === 1 ? `var(--gs-cell-height)` : `calc(${n.y} * var(--gs-cell-height))`) : null;\n            el.style.left = n.x ? (n.x === 1 ? `var(--gs-column-width)` : `calc(${n.x} * var(--gs-column-width))`) : null;\n            el.style.width = n.w > 1 ? `calc(${n.w} * var(--gs-column-width))` : null;\n            el.style.height = n.h > 1 ? `calc(${n.h} * var(--gs-cell-height))` : null;\n        }\n        // NOTE: those are technically not needed anymore (v12+) as we have CSS vars for everything, but some users depends on them to render item size using CSS\n        n.x > 0 ? el.setAttribute('gs-x', String(n.x)) : el.removeAttribute('gs-x');\n        n.y > 0 ? el.setAttribute('gs-y', String(n.y)) : el.removeAttribute('gs-y');\n        n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\n        n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\n        return this;\n    }\n    /** @internal call to write any default attributes back to element */\n    _writeAttr(el, node) {\n        if (!node)\n            return this;\n        this._writePosAttr(el, node);\n        const attrs /*: GridStackWidget but strings */ = {\n            // autoPosition: 'gs-auto-position', // no need to write out as already in node and doesn't affect CSS\n            noResize: 'gs-no-resize',\n            noMove: 'gs-no-move',\n            locked: 'gs-locked',\n            id: 'gs-id',\n            sizeToContent: 'gs-size-to-content',\n        };\n        for (const key in attrs) {\n            if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\n                el.setAttribute(attrs[key], String(node[key]));\n            }\n            else {\n                el.removeAttribute(attrs[key]);\n            }\n        }\n        return this;\n    }\n    /** @internal call to read any default attributes from element */\n    _readAttr(el, clearDefaultAttr = true) {\n        const n = {};\n        n.x = Utils.toNumber(el.getAttribute('gs-x'));\n        n.y = Utils.toNumber(el.getAttribute('gs-y'));\n        n.w = Utils.toNumber(el.getAttribute('gs-w'));\n        n.h = Utils.toNumber(el.getAttribute('gs-h'));\n        n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\n        n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\n        n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\n        n.locked = Utils.toBool(el.getAttribute('gs-locked'));\n        const attr = el.getAttribute('gs-size-to-content');\n        if (attr) {\n            if (attr === 'true' || attr === 'false')\n                n.sizeToContent = Utils.toBool(attr);\n            else\n                n.sizeToContent = parseInt(attr, 10);\n        }\n        n.id = el.getAttribute('gs-id');\n        // read but never written out\n        n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\n        n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\n        n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\n        n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\n        // v8.x optimization to reduce un-needed attr that don't render or are default CSS\n        if (clearDefaultAttr) {\n            if (n.w === 1)\n                el.removeAttribute('gs-w');\n            if (n.h === 1)\n                el.removeAttribute('gs-h');\n            if (n.maxW)\n                el.removeAttribute('gs-max-w');\n            if (n.minW)\n                el.removeAttribute('gs-min-w');\n            if (n.maxH)\n                el.removeAttribute('gs-max-h');\n            if (n.minH)\n                el.removeAttribute('gs-min-h');\n        }\n        // remove any key not found (null or false which is default, unless sizeToContent=false override)\n        for (const key in n) {\n            if (!n.hasOwnProperty(key))\n                return;\n            if (!n[key] && n[key] !== 0 && key !== 'sizeToContent') { // 0 can be valid value (x,y only really)\n                delete n[key];\n            }\n        }\n        return n;\n    }\n    /** @internal */\n    _setStaticClass() {\n        const classes = ['grid-stack-static'];\n        if (this.opts.staticGrid) {\n            this.el.classList.add(...classes);\n            this.el.setAttribute('gs-static', 'true');\n        }\n        else {\n            this.el.classList.remove(...classes);\n            this.el.removeAttribute('gs-static');\n        }\n        return this;\n    }\n    /**\n     * called when we are being resized - check if the one Column Mode needs to be turned on/off\n     * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\n     * or `sizeToContent` gridItem options.\n     */\n    onResize(clientWidth = this.el?.clientWidth) {\n        if (!clientWidth)\n            return; // return if we're gone or no size yet (will get called again)\n        if (this.prevWidth === clientWidth)\n            return; // no-op\n        this.prevWidth = clientWidth;\n        // console.log('onResize ', clientWidth);\n        this.batchUpdate();\n        // see if we're nested and take our column count from our parent....\n        let columnChanged = false;\n        if (this._autoColumn && this.parentGridNode) {\n            if (this.opts.column !== this.parentGridNode.w) {\n                this.column(this.parentGridNode.w, this.opts.layout || 'list');\n                columnChanged = true;\n            }\n        }\n        else {\n            // else check for dynamic column\n            columnChanged = this.checkDynamicColumn();\n        }\n        // make the cells content square again\n        if (this._isAutoCellHeight)\n            this.cellHeight();\n        // update any nested grids, or items size\n        this.engine.nodes.forEach(n => {\n            if (n.subGrid)\n                n.subGrid.onResize();\n        });\n        if (!this._skipInitialResize)\n            this.resizeToContentCheck(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\n        delete this._skipInitialResize;\n        this.batchUpdate(false);\n        return this;\n    }\n    /** resizes content for given node (or all) if shouldSizeToContent() is true */\n    resizeToContentCheck(delay = false, n = undefined) {\n        if (!this.engine)\n            return; // we've been deleted in between!\n        // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\n        // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\n        if (delay && this.hasAnimationCSS())\n            return setTimeout(() => this.resizeToContentCheck(false, n), this.animationDelay);\n        if (n) {\n            if (Utils.shouldSizeToContent(n))\n                this.resizeToContentCBCheck(n.el);\n        }\n        else if (this.engine.nodes.some(n => Utils.shouldSizeToContent(n))) {\n            const nodes = [...this.engine.nodes]; // in case order changes while resizing one\n            this.batchUpdate();\n            nodes.forEach(n => {\n                if (Utils.shouldSizeToContent(n))\n                    this.resizeToContentCBCheck(n.el);\n            });\n            this._ignoreLayoutsNodeChange = true; // loop through each node will set/reset around each move, so set it here again\n            this.batchUpdate(false);\n            this._ignoreLayoutsNodeChange = false;\n        }\n        // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\n        if (this._gsEventHandler['resizecontent'])\n            this._gsEventHandler['resizecontent'](null, n ? [n] : this.engine.nodes);\n    }\n    /** add or remove the grid element size event handler */\n    _updateResizeEvent(forceRemove = false) {\n        // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting dynamic column (i.e. doing work)\n        // or supporting new sizeToContent option.\n        const trackSize = !this.parentGridNode && (this._isAutoCellHeight || this.opts.sizeToContent || this.opts.columnOpts\n            || this.engine.nodes.find(n => n.sizeToContent));\n        if (!forceRemove && trackSize && !this.resizeObserver) {\n            this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);\n            this.resizeObserver = new ResizeObserver(() => this._sizeThrottle());\n            this.resizeObserver.observe(this.el);\n            this._skipInitialResize = true; // makeWidget will originally have called on startup\n        }\n        else if ((forceRemove || !trackSize) && this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            delete this.resizeObserver;\n            delete this._sizeThrottle;\n        }\n        return this;\n    }\n    /** @internal convert a potential selector into actual element */\n    static getElement(els = '.grid-stack-item') { return Utils.getElement(els); }\n    /** @internal */\n    static getElements(els = '.grid-stack-item') { return Utils.getElements(els); }\n    /** @internal */\n    static getGridElement(els) { return GridStack.getElement(els); }\n    /** @internal */\n    static getGridElements(els) { return Utils.getElements(els); }\n    /** @internal initialize margin top/bottom/left/right and units */\n    _initMargin() {\n        let data;\n        let margin = 0;\n        // support passing multiple values like CSS (ex: '5px 10px 0 20px')\n        let margins = [];\n        if (typeof this.opts.margin === 'string') {\n            margins = this.opts.margin.split(' ');\n        }\n        if (margins.length === 2) { // top/bot, left/right like CSS\n            this.opts.marginTop = this.opts.marginBottom = margins[0];\n            this.opts.marginLeft = this.opts.marginRight = margins[1];\n        }\n        else if (margins.length === 4) { // Clockwise like CSS\n            this.opts.marginTop = margins[0];\n            this.opts.marginRight = margins[1];\n            this.opts.marginBottom = margins[2];\n            this.opts.marginLeft = margins[3];\n        }\n        else {\n            data = Utils.parseHeight(this.opts.margin);\n            this.opts.marginUnit = data.unit;\n            margin = this.opts.margin = data.h;\n        }\n        // see if top/bottom/left/right need to be set as well\n        const keys = ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'];\n        keys.forEach(k => {\n            if (this.opts[k] === undefined) {\n                this.opts[k] = margin;\n            }\n            else {\n                data = Utils.parseHeight(this.opts[k]);\n                this.opts[k] = data.h;\n                delete this.opts.margin;\n            }\n        });\n        this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\n        if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\n            this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\n        }\n        // finally Update the CSS margin variables (inside the cell height) */\n        const style = this.el.style;\n        style.setProperty('--gs-item-margin-top', `${this.opts.marginTop}${this.opts.marginUnit}`);\n        style.setProperty('--gs-item-margin-bottom', `${this.opts.marginBottom}${this.opts.marginUnit}`);\n        style.setProperty('--gs-item-margin-right', `${this.opts.marginRight}${this.opts.marginUnit}`);\n        style.setProperty('--gs-item-margin-left', `${this.opts.marginLeft}${this.opts.marginUnit}`);\n        return this;\n    }\n    /* ===========================================================================================\n     * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\n     * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\n     * ===========================================================================================\n     */\n    /** get the global (but static to this code) DD implementation */\n    static getDD() {\n        return dd;\n    }\n    /**\n     * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\n     * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\n     * is dynamically create and needs to be set later.\n     * @param dragIn string selector (ex: '.sidebar-item') or list of dom elements\n     * @param dragInOptions options - see DDDragOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\n     * @param widgets GridStackWidget def to assign to each element which defines what to create on drop\n     * @param root optional root which defaults to document (for shadow dom pass the parent HTMLDocument)\n     */\n    static setupDragIn(dragIn, dragInOptions, widgets, root = document) {\n        if (dragInOptions?.pause !== undefined) {\n            DDManager.pauseDrag = dragInOptions.pause;\n        }\n        dragInOptions = { appendTo: 'body', helper: 'clone', ...(dragInOptions || {}) }; // default to handle:undefined = drag by the whole item\n        const els = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\n        els.forEach((el, i) => {\n            if (!dd.isDraggable(el))\n                dd.dragIn(el, dragInOptions);\n            if (widgets?.[i])\n                el.gridstackNode = widgets[i];\n        });\n    }\n    /**\n     * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\n     * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\n     * @param els widget or selector to modify.\n     * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\n     */\n    movable(els, val) {\n        if (this.opts.staticGrid)\n            return this; // can't move a static grid!\n        GridStack.getElements(els).forEach(el => {\n            const n = el.gridstackNode;\n            if (!n)\n                return;\n            val ? delete n.noMove : n.noMove = true;\n            this.prepareDragDrop(n.el); // init DD if need be, and adjust\n        });\n        return this;\n    }\n    /**\n     * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\n     * @param els  widget or selector to modify\n     * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\n     */\n    resizable(els, val) {\n        if (this.opts.staticGrid)\n            return this; // can't resize a static grid!\n        GridStack.getElements(els).forEach(el => {\n            const n = el.gridstackNode;\n            if (!n)\n                return;\n            val ? delete n.noResize : n.noResize = true;\n            this.prepareDragDrop(n.el); // init DD if need be, and adjust\n        });\n        return this;\n    }\n    /**\n     * Temporarily disables widgets moving/resizing.\n     * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\n     * Note: no-op for static grid\n     * This is a shortcut for:\n     * @example\n     *  grid.enableMove(false);\n     *  grid.enableResize(false);\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    disable(recurse = true) {\n        if (this.opts.staticGrid)\n            return;\n        this.enableMove(false, recurse);\n        this.enableResize(false, recurse);\n        this._triggerEvent('disable');\n        return this;\n    }\n    /**\n     * Re-enables widgets moving/resizing - see disable().\n     * Note: no-op for static grid.\n     * This is a shortcut for:\n     * @example\n     *  grid.enableMove(true);\n     *  grid.enableResize(true);\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    enable(recurse = true) {\n        if (this.opts.staticGrid)\n            return;\n        this.enableMove(true, recurse);\n        this.enableResize(true, recurse);\n        this._triggerEvent('enable');\n        return this;\n    }\n    /**\n     * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    enableMove(doEnable, recurse = true) {\n        if (this.opts.staticGrid)\n            return this; // can't move a static grid!\n        doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\n        this.engine.nodes.forEach(n => {\n            this.prepareDragDrop(n.el);\n            if (n.subGrid && recurse)\n                n.subGrid.enableMove(doEnable, recurse);\n        });\n        return this;\n    }\n    /**\n     * Enables/disables widget resizing. No-op for static grids.\n     * @param recurse true (default) if sub-grids also get updated\n     */\n    enableResize(doEnable, recurse = true) {\n        if (this.opts.staticGrid)\n            return this; // can't size a static grid!\n        doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\n        this.engine.nodes.forEach(n => {\n            this.prepareDragDrop(n.el);\n            if (n.subGrid && recurse)\n                n.subGrid.enableResize(doEnable, recurse);\n        });\n        return this;\n    }\n    /** @internal call when drag (and drop) needs to be cancelled (Esc key) */\n    cancelDrag() {\n        const n = this._placeholder?.gridstackNode;\n        if (!n)\n            return;\n        if (n._isExternal) {\n            // remove any newly inserted nodes (from outside)\n            n._isAboutToRemove = true;\n            this.engine.removeNode(n);\n        }\n        else if (n._isAboutToRemove) {\n            // restore any temp removed (dragged over trash)\n            GridStack._itemRemoving(n.el, false);\n        }\n        this.engine.restoreInitial();\n    }\n    /** @internal removes any drag&drop present (called during destroy) */\n    _removeDD(el) {\n        dd.draggable(el, 'destroy').resizable(el, 'destroy');\n        if (el.gridstackNode) {\n            delete el.gridstackNode._initDD; // reset our DD init flag\n        }\n        delete el.ddElement;\n        return this;\n    }\n    /** @internal called to add drag over to support widgets being added externally */\n    _setupAcceptWidget() {\n        // check if we need to disable things\n        if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\n            dd.droppable(this.el, 'destroy');\n            return this;\n        }\n        // vars shared across all methods\n        let cellHeight, cellWidth;\n        const onDrag = (event, el, helper) => {\n            helper = helper || el;\n            const node = helper.gridstackNode;\n            if (!node)\n                return;\n            // if the element is being dragged from outside, scale it down to match the grid's scale\n            // and slightly adjust its position relative to the mouse\n            if (!node.grid?.el) {\n                // this scales the helper down\n                helper.style.transform = `scale(${1 / this.dragTransform.xScale},${1 / this.dragTransform.yScale})`;\n                // this makes it so that the helper is well positioned relative to the mouse after scaling\n                const helperRect = helper.getBoundingClientRect();\n                helper.style.left = helperRect.x + (this.dragTransform.xScale - 1) * (event.clientX - helperRect.x) / this.dragTransform.xScale + 'px';\n                helper.style.top = helperRect.y + (this.dragTransform.yScale - 1) * (event.clientY - helperRect.y) / this.dragTransform.yScale + 'px';\n                helper.style.transformOrigin = `0px 0px`;\n            }\n            let { top, left } = helper.getBoundingClientRect();\n            const rect = this.el.getBoundingClientRect();\n            left -= rect.left;\n            top -= rect.top;\n            const ui = {\n                position: {\n                    top: top * this.dragTransform.xScale,\n                    left: left * this.dragTransform.yScale\n                }\n            };\n            if (node._temporaryRemoved) {\n                node.x = Math.max(0, Math.round(left / cellWidth));\n                node.y = Math.max(0, Math.round(top / cellHeight));\n                delete node.autoPosition;\n                this.engine.nodeBoundFix(node);\n                // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\n                if (!this.engine.willItFit(node)) {\n                    node.autoPosition = true; // ignore x,y and try for any slot...\n                    if (!this.engine.willItFit(node)) {\n                        dd.off(el, 'drag'); // stop calling us\n                        return; // full grid or can't grow\n                    }\n                    if (node._willFitPos) {\n                        // use the auto position instead #1687\n                        Utils.copyPos(node, node._willFitPos);\n                        delete node._willFitPos;\n                    }\n                }\n                // re-use the existing node dragging method\n                this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\n            }\n            else {\n                // re-use the existing node dragging that does so much of the collision detection\n                this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\n            }\n        };\n        dd.droppable(this.el, {\n            accept: (el) => {\n                const node = el.gridstackNode || this._readAttr(el, false);\n                // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\n                if (node?.grid === this)\n                    return true;\n                if (!this.opts.acceptWidgets)\n                    return false;\n                // check for accept method or class matching\n                let canAccept = true;\n                if (typeof this.opts.acceptWidgets === 'function') {\n                    canAccept = this.opts.acceptWidgets(el);\n                }\n                else {\n                    const selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets);\n                    canAccept = el.matches(selector);\n                }\n                // finally check to make sure we actually have space left #1571 #2633\n                if (canAccept && node && this.opts.maxRow) {\n                    const n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH }; // only width/height matters and autoPosition\n                    canAccept = this.engine.willItFit(n);\n                }\n                return canAccept;\n            }\n        })\n            /**\n             * entering our grid area\n             */\n            .on(this.el, 'dropover', (event, el, helper) => {\n            // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\n            let node = helper?.gridstackNode || el.gridstackNode;\n            // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\n            if (node?.grid === this && !node._temporaryRemoved) {\n                // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\n                return false; // prevent parent from receiving msg (which may be a grid as well)\n            }\n            // If sidebar item, restore the sidebar node size to ensure consistent behavior when dragging between grids\n            if (node?._sidebarOrig) {\n                node.w = node._sidebarOrig.w;\n                node.h = node._sidebarOrig.h;\n            }\n            // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\n            if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\n                // console.log('dropover without leave'); // TEST\n                const otherGrid = node.grid;\n                otherGrid._leave(el, helper);\n            }\n            helper = helper || el;\n            // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\n            cellWidth = this.cellWidth();\n            cellHeight = this.getCellHeight(true);\n            // sidebar items: load any element attributes if we don't have a node on first enter from the sidebar\n            if (!node) {\n                const attr = helper.getAttribute('data-gs-widget') || helper.getAttribute('gridstacknode'); // TBD: temp support for old V11.0.0 attribute\n                if (attr) {\n                    try {\n                        node = JSON.parse(attr);\n                    }\n                    catch (error) {\n                        console.error(\"Gridstack dropover: Bad JSON format: \", attr);\n                    }\n                    helper.removeAttribute('data-gs-widget');\n                    helper.removeAttribute('gridstacknode');\n                }\n                if (!node)\n                    node = this._readAttr(helper); // used to pass false for #2354, but now we clone top level node\n                // On first grid enter from sidebar, set the initial sidebar item size properties for the node\n                node._sidebarOrig = { w: node.w, h: node.h };\n            }\n            if (!node.grid) { // sidebar item\n                if (!node.el)\n                    node = { ...node }; // clone first time we're coming from sidebar (since 'clone' doesn't copy vars)\n                node._isExternal = true;\n                helper.gridstackNode = node;\n            }\n            // calculate the grid size based on element outer size\n            const w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\n            const h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\n            // if the item came from another grid, make a copy and save the original info in case we go back there\n            if (node.grid && node.grid !== this) {\n                // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\n                // console.log('dropover cloning node'); // TEST\n                if (!el._gridstackNodeOrig)\n                    el._gridstackNodeOrig = node; // shouldn't have multiple nested!\n                el.gridstackNode = node = { ...node, w, h, grid: this };\n                delete node.x;\n                delete node.y;\n                this.engine.cleanupNode(node)\n                    .nodeBoundFix(node);\n                // restore some internal fields we need after clearing them all\n                node._initDD =\n                    node._isExternal = // DOM needs to be re-parented on a drop\n                        node._temporaryRemoved = true; // so it can be inserted onDrag below\n            }\n            else {\n                node.w = w;\n                node.h = h;\n                node._temporaryRemoved = true; // so we can insert it\n            }\n            // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\n            GridStack._itemRemoving(node.el, false);\n            dd.on(el, 'drag', onDrag);\n            // make sure this is called at least once when going fast #1578\n            onDrag(event, el, helper);\n            return false; // prevent parent from receiving msg (which may be a grid as well)\n        })\n            /**\n             * Leaving our grid area...\n             */\n            .on(this.el, 'dropout', (event, el, helper) => {\n            // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\n            const node = helper?.gridstackNode || el.gridstackNode;\n            if (!node)\n                return false;\n            // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\n            // so skip this one if we're not the active grid really..\n            if (!node.grid || node.grid === this) {\n                this._leave(el, helper);\n                // if we were created as temporary nested grid, go back to before state\n                if (this._isTemp) {\n                    this.removeAsSubGrid(node);\n                }\n            }\n            return false; // prevent parent from receiving msg (which may be grid as well)\n        })\n            /**\n             * end - releasing the mouse\n             */\n            .on(this.el, 'drop', (event, el, helper) => {\n            const node = helper?.gridstackNode || el.gridstackNode;\n            // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\n            if (node?.grid === this && !node._isExternal)\n                return false;\n            const wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\n            const wasSidebar = el !== helper;\n            this.placeholder.remove();\n            delete this.placeholder.gridstackNode;\n            // disable animation when replacing a placeholder (already positioned) with actual content\n            if (wasAdded && this.opts.animate) {\n                this.setAnimation(false);\n                this.setAnimation(true, true); // delay adding back\n            }\n            // notify previous grid of removal\n            // console.log('drop delete _gridstackNodeOrig') // TEST\n            const origNode = el._gridstackNodeOrig;\n            delete el._gridstackNodeOrig;\n            if (wasAdded && origNode?.grid && origNode.grid !== this) {\n                const oGrid = origNode.grid;\n                oGrid.engine.removeNodeFromLayoutCache(origNode);\n                oGrid.engine.removedNodes.push(origNode);\n                oGrid._triggerRemoveEvent()._triggerChangeEvent();\n                // if it's an empty sub-grid that got auto-created, nuke it\n                if (oGrid.parentGridNode && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\n                    oGrid.removeAsSubGrid();\n                }\n            }\n            if (!node)\n                return false;\n            // use existing placeholder node as it's already in our list with drop location\n            if (wasAdded) {\n                this.engine.cleanupNode(node); // removes all internal _xyz values\n                node.grid = this;\n            }\n            delete node.grid?._isTemp;\n            dd.off(el, 'drag');\n            // if we made a copy insert that instead of the original (sidebar item)\n            if (helper !== el) {\n                helper.remove();\n                el = helper;\n            }\n            else {\n                el.remove(); // reduce flicker as we change depth here, and size further down\n            }\n            this._removeDD(el);\n            if (!wasAdded)\n                return false;\n            const subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\n            Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\n            Utils.removePositioningStyles(el);\n            // give the user a chance to alter the widget that will get inserted if new sidebar item\n            if (wasSidebar && (node.content || node.subGridOpts || GridStack.addRemoveCB)) {\n                delete node.el;\n                el = this.addWidget(node);\n            }\n            else {\n                this._prepareElement(el, true, node);\n                this.el.appendChild(el);\n                // resizeToContent is skipped in _prepareElement() until node is visible (clientHeight=0) so call it now\n                this.resizeToContentCheck(false, node);\n                if (subGrid) {\n                    subGrid.parentGridNode = node;\n                }\n                this._updateContainerHeight();\n            }\n            this.engine.addedNodes.push(node);\n            this._triggerAddEvent();\n            this._triggerChangeEvent();\n            this.engine.endUpdate();\n            if (this._gsEventHandler['dropped']) {\n                this._gsEventHandler['dropped']({ ...event, type: 'dropped' }, origNode && origNode.grid ? origNode : undefined, node);\n            }\n            return false; // prevent parent from receiving msg (which may be grid as well)\n        });\n        return this;\n    }\n    /** @internal mark item for removal */\n    static _itemRemoving(el, remove) {\n        if (!el)\n            return;\n        const node = el ? el.gridstackNode : undefined;\n        if (!node?.grid || el.classList.contains(node.grid.opts.removableOptions.decline))\n            return;\n        remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\n        remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\n    }\n    /** @internal called to setup a trash drop zone if the user specifies it */\n    _setupRemoveDrop() {\n        if (typeof this.opts.removable !== 'string')\n            return this;\n        const trashEl = document.querySelector(this.opts.removable);\n        if (!trashEl)\n            return this;\n        // only register ONE static drop-over/dropout callback for the 'trash', and it will\n        // update the passed in item and parent grid because the '.trash' is a shared resource anyway,\n        // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\n        if (!this.opts.staticGrid && !dd.isDroppable(trashEl)) {\n            dd.droppable(trashEl, this.opts.removableOptions)\n                .on(trashEl, 'dropover', (event, el) => GridStack._itemRemoving(el, true))\n                .on(trashEl, 'dropout', (event, el) => GridStack._itemRemoving(el, false));\n        }\n        return this;\n    }\n    /**\n     * prepares the element for drag&drop - this is normally called by makeWidget() unless are are delay loading\n     * @param el GridItemHTMLElement of the widget\n     * @param [force=false]\n     * */\n    prepareDragDrop(el, force = false) {\n        const node = el?.gridstackNode;\n        if (!node)\n            return;\n        const noMove = node.noMove || this.opts.disableDrag;\n        const noResize = node.noResize || this.opts.disableResize;\n        // check for disabled grid first\n        const disable = this.opts.staticGrid || (noMove && noResize);\n        if (force || disable) {\n            if (node._initDD) {\n                this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\n                delete node._initDD;\n            }\n            if (disable)\n                el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\n            if (!force)\n                return this;\n        }\n        if (!node._initDD) {\n            // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\n            let cellWidth;\n            let cellHeight;\n            /** called when item starts moving/resizing */\n            const onStartMoving = (event, ui) => {\n                // trigger any 'dragstart' / 'resizestart' manually\n                this.triggerEvent(event, event.target);\n                cellWidth = this.cellWidth();\n                cellHeight = this.getCellHeight(true); // force pixels for calculations\n                this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\n            };\n            /** called when item is being dragged/resized */\n            const dragOrResize = (event, ui) => {\n                this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\n            };\n            /** called when the item stops moving/resizing */\n            const onEndMoving = (event) => {\n                this.placeholder.remove();\n                delete this.placeholder.gridstackNode;\n                delete node._moving;\n                delete node._resizing;\n                delete node._event;\n                delete node._lastTried;\n                const widthChanged = node.w !== node._orig.w;\n                // if the item has moved to another grid, we're done here\n                const target = event.target;\n                if (!target.gridstackNode || target.gridstackNode.grid !== this)\n                    return;\n                node.el = target;\n                if (node._isAboutToRemove) {\n                    const grid = el.gridstackNode.grid;\n                    if (grid._gsEventHandler[event.type]) {\n                        grid._gsEventHandler[event.type](event, target);\n                    }\n                    grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\n                    grid.removeWidget(el, true, true);\n                }\n                else {\n                    Utils.removePositioningStyles(target);\n                    if (node._temporaryRemoved) {\n                        // got removed - restore item back to before dragging position\n                        Utils.copyPos(node, node._orig); // @ts-ignore\n                        this._writePosAttr(target, node);\n                        this.engine.addNode(node);\n                    }\n                    else {\n                        // move to new placeholder location\n                        this._writePosAttr(target, node);\n                    }\n                    this.triggerEvent(event, target);\n                }\n                // @ts-ignore\n                this._extraDragRow = 0; // @ts-ignore\n                this._updateContainerHeight(); // @ts-ignore\n                this._triggerChangeEvent();\n                this.engine.endUpdate();\n                if (event.type === 'resizestop') {\n                    if (Number.isInteger(node.sizeToContent))\n                        node.sizeToContent = node.h; // new soft limit\n                    this.resizeToContentCheck(widthChanged, node); // wait for width animation if changed\n                }\n            };\n            dd.draggable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                drag: dragOrResize\n            }).resizable(el, {\n                start: onStartMoving,\n                stop: onEndMoving,\n                resize: dragOrResize\n            });\n            node._initDD = true; // we've set DD support now\n        }\n        // finally fine tune move vs resize by disabling any part...\n        dd.draggable(el, noMove ? 'disable' : 'enable')\n            .resizable(el, noResize ? 'disable' : 'enable');\n        return this;\n    }\n    /** @internal handles actual drag/resize start */\n    _onStartMoving(el, event, ui, node, cellWidth, cellHeight) {\n        this.engine.cleanNodes()\n            .beginUpdate(node);\n        // @ts-ignore\n        this._writePosAttr(this.placeholder, node);\n        this.el.appendChild(this.placeholder);\n        this.placeholder.gridstackNode = node;\n        // console.log('_onStartMoving placeholder') // TEST\n        // if the element is inside a grid, it has already been scaled\n        // we can use that as a scale reference\n        if (node.grid?.el) {\n            this.dragTransform = Utils.getValuesFromTransformedElement(el);\n        }\n        // if the element is being dragged from outside (not from any grid)\n        // we use the grid as the transformation reference, since the helper is not subject to transformation\n        else if (this.placeholder && this.placeholder.closest('.grid-stack')) {\n            const gridEl = this.placeholder.closest('.grid-stack');\n            this.dragTransform = Utils.getValuesFromTransformedElement(gridEl);\n        }\n        // Fallback\n        else {\n            this.dragTransform = {\n                xScale: 1,\n                xOffset: 0,\n                yScale: 1,\n                yOffset: 0,\n            };\n        }\n        node.el = this.placeholder;\n        node._lastUiPosition = ui.position;\n        node._prevYPix = ui.position.top;\n        node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\n        node._resizing = (event.type === 'resizestart');\n        delete node._lastTried;\n        if (event.type === 'dropover' && node._temporaryRemoved) {\n            // console.log('engine.addNode x=' + node.x); // TEST\n            this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\n            node._moving = true; // AFTER, mark as moving object (wanted fix location before)\n        }\n        // set the min/max resize info taking into account the column count and position (so we don't resize outside the grid)\n        this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);\n        if (event.type === 'resizestart') {\n            const colLeft = this.getColumn() - node.x;\n            const rowLeft = (this.opts.maxRow || Number.MAX_SAFE_INTEGER) - node.y;\n            dd.resizable(el, 'option', 'minWidth', cellWidth * Math.min(node.minW || 1, colLeft))\n                .resizable(el, 'option', 'minHeight', cellHeight * Math.min(node.minH || 1, rowLeft))\n                .resizable(el, 'option', 'maxWidth', cellWidth * Math.min(node.maxW || Number.MAX_SAFE_INTEGER, colLeft))\n                .resizable(el, 'option', 'maxWidthMoveLeft', cellWidth * Math.min(node.maxW || Number.MAX_SAFE_INTEGER, node.x + node.w))\n                .resizable(el, 'option', 'maxHeight', cellHeight * Math.min(node.maxH || Number.MAX_SAFE_INTEGER, rowLeft))\n                .resizable(el, 'option', 'maxHeightMoveUp', cellHeight * Math.min(node.maxH || Number.MAX_SAFE_INTEGER, node.y + node.h));\n        }\n    }\n    /** @internal handles actual drag/resize */\n    _dragOrResize(el, event, ui, node, cellWidth, cellHeight) {\n        const p = { ...node._orig }; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\n        let resizing;\n        let mLeft = this.opts.marginLeft, mRight = this.opts.marginRight, mTop = this.opts.marginTop, mBottom = this.opts.marginBottom;\n        // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\n        const mHeight = Math.round(cellHeight * 0.1), mWidth = Math.round(cellWidth * 0.1);\n        mLeft = Math.min(mLeft, mWidth);\n        mRight = Math.min(mRight, mWidth);\n        mTop = Math.min(mTop, mHeight);\n        mBottom = Math.min(mBottom, mHeight);\n        if (event.type === 'drag') {\n            if (node._temporaryRemoved)\n                return; // handled by dropover\n            const distance = ui.position.top - node._prevYPix;\n            node._prevYPix = ui.position.top;\n            if (this.opts.draggable.scroll !== false) {\n                Utils.updateScrollPosition(el, ui.position, distance);\n            }\n            // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\n            const left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);\n            const top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);\n            p.x = Math.round(left / cellWidth);\n            p.y = Math.round(top / cellHeight);\n            // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\n            const prev = this._extraDragRow;\n            if (this.engine.collide(node, p)) {\n                const row = this.getRow();\n                let extra = Math.max(0, (p.y + node.h) - row);\n                if (this.opts.maxRow && row + extra > this.opts.maxRow) {\n                    extra = Math.max(0, this.opts.maxRow - row);\n                } // @ts-ignore\n                this._extraDragRow = extra; // @ts-ignore\n            }\n            else\n                this._extraDragRow = 0; // @ts-ignore\n            if (this._extraDragRow !== prev)\n                this._updateContainerHeight();\n            if (node.x === p.x && node.y === p.y)\n                return; // skip same\n            // DON'T skip one we tried as we might have failed because of coverage <50% before\n            // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\n        }\n        else if (event.type === 'resize') {\n            if (p.x < 0)\n                return;\n            // Scrolling page if needed\n            Utils.updateScrollResize(event, el, cellHeight);\n            // get new size\n            p.w = Math.round((ui.size.width - mLeft) / cellWidth);\n            p.h = Math.round((ui.size.height - mTop) / cellHeight);\n            if (node.w === p.w && node.h === p.h)\n                return;\n            if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h)\n                return; // skip one we tried (but failed)\n            // if we size on left/top side this might move us, so get possible new position as well\n            const left = ui.position.left + mLeft;\n            const top = ui.position.top + mTop;\n            p.x = Math.round(left / cellWidth);\n            p.y = Math.round(top / cellHeight);\n            resizing = true;\n        }\n        node._event = event;\n        node._lastTried = p; // set as last tried (will nuke if we go there)\n        const rect = {\n            x: ui.position.left + mLeft,\n            y: ui.position.top + mTop,\n            w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\n            h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\n        };\n        if (this.engine.moveNodeCheck(node, { ...p, cellWidth, cellHeight, rect, resizing })) {\n            node._lastUiPosition = ui.position;\n            this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\n            delete node._skipDown;\n            if (resizing && node.subGrid)\n                node.subGrid.onResize();\n            this._extraDragRow = 0; // @ts-ignore\n            this._updateContainerHeight();\n            const target = event.target; // @ts-ignore\n            // Do not write sidebar item attributes back to the original sidebar el\n            if (!node._sidebarOrig) {\n                this._writePosAttr(target, node);\n            }\n            this.triggerEvent(event, target);\n        }\n    }\n    /** call given event callback on our main top-most grid (if we're nested) */\n    triggerEvent(event, target) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let grid = this;\n        while (grid.parentGridNode)\n            grid = grid.parentGridNode.grid;\n        if (grid._gsEventHandler[event.type]) {\n            grid._gsEventHandler[event.type](event, target);\n        }\n    }\n    /** @internal called when item leaving our area by either cursor dropout event\n     * or shape is outside our boundaries. remove it from us, and mark temporary if this was\n     * our item to start with else restore prev node values from prev grid it came from.\n     */\n    _leave(el, helper) {\n        helper = helper || el;\n        const node = helper.gridstackNode;\n        if (!node)\n            return;\n        // remove the scale of the helper on leave\n        helper.style.transform = helper.style.transformOrigin = null;\n        dd.off(el, 'drag'); // no need to track while being outside\n        // this gets called when cursor leaves and shape is outside, so only do this once\n        if (node._temporaryRemoved)\n            return;\n        node._temporaryRemoved = true;\n        this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\n        node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\n        const sidebarOrig = node._sidebarOrig;\n        if (node._isExternal)\n            this.engine.cleanupNode(node);\n        // Restore sidebar item initial size info to stay consistent when dragging between multiple grids\n        node._sidebarOrig = sidebarOrig;\n        if (this.opts.removable === true) { // boolean vs a class string\n            // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\n            GridStack._itemRemoving(el, true);\n        }\n        // finally if item originally came from another grid, but left us, restore things back to prev info\n        if (el._gridstackNodeOrig) {\n            // console.log('leave delete _gridstackNodeOrig') // TEST\n            el.gridstackNode = el._gridstackNodeOrig;\n            delete el._gridstackNodeOrig;\n        }\n        else if (node._isExternal) {\n            // item came from outside restore all nodes back to original\n            this.engine.restoreInitial();\n        }\n    }\n    // legacy method removed\n    commit() { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\n}\n/**\n * callback to create the content of widgets so the app can control how to store and restore it\n * By default this lib will do 'el.textContent = w.content' forcing text only support for avoiding potential XSS issues.\n */\nGridStack.renderCB = (el, w) => { if (el && w?.content)\n    el.textContent = w.content; };\n/** parent class for sizing content. defaults to '.grid-stack-item-content' */\nGridStack.resizeToContentParent = '.grid-stack-item-content';\n/** scoping so users can call GridStack.Utils.sort() for example */\nGridStack.Utils = Utils;\n/** scoping so users can call new GridStack.Engine(12) for example */\nGridStack.Engine = GridStackEngine;\nGridStack.GDRev = '12.2.2';\nexport { GridStack };\n//# sourceMappingURL=gridstack.js.map","\n      import API from \"!../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../css-loader/dist/cjs.js!./gridstack.min.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../css-loader/dist/cjs.js!./gridstack.min.css\";\n       export default content && content.locals ? content.locals : undefined;\n","/**\n * types.ts 12.2.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\n// default values for grid options - used during init and when saving out\nexport const gridDefaults = {\n    alwaysShowResizeHandle: 'mobile',\n    animate: true,\n    auto: true,\n    cellHeight: 'auto',\n    cellHeightThrottle: 100,\n    cellHeightUnit: 'px',\n    column: 12,\n    draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\n    handle: '.grid-stack-item-content',\n    itemClass: 'grid-stack-item',\n    margin: 10,\n    marginUnit: 'px',\n    maxRow: 0,\n    minRow: 0,\n    placeholderClass: 'grid-stack-placeholder',\n    placeholderText: '',\n    removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable' },\n    resizable: { handles: 'se' },\n    rtl: 'auto',\n    // **** same as not being set ****\n    // disableDrag: false,\n    // disableResize: false,\n    // float: false,\n    // handleClass: null,\n    // removable: false,\n    // staticGrid: false,\n    //removable\n};\n//# sourceMappingURL=types.js.map","/**\n * utils.ts 12.2.2\n * Copyright (c) 2021-2024 Alain Dumesny - see GridStack root license\n */\n/** checks for obsolete method names */\n// eslint-disable-next-line\nexport function obsolete(self, f, oldName, newName, rev) {\n    const wrapper = (...args) => {\n        console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\n            'with `' + newName + '`. It will be **removed** in a future release');\n        return f.apply(self, args);\n    };\n    wrapper.prototype = f.prototype;\n    return wrapper;\n}\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\nexport function obsoleteOpts(opts, oldName, newName, rev) {\n    if (opts[oldName] !== undefined) {\n        opts[newName] = opts[oldName];\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\n            newName + '`. It will be **removed** in a future release');\n    }\n}\n/** checks for obsolete grid options which are gone */\nexport function obsoleteOptsDel(opts, oldName, rev, info) {\n    if (opts[oldName] !== undefined) {\n        console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\n    }\n}\n/** checks for obsolete Jquery element attributes */\nexport function obsoleteAttr(el, oldName, newName, rev) {\n    const oldAttr = el.getAttribute(oldName);\n    if (oldAttr !== null) {\n        el.setAttribute(newName, oldAttr);\n        console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\n            newName + '`. It will be **removed** in a future release');\n    }\n}\n/**\n * Utility methods\n */\nexport class Utils {\n    /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\n    static getElements(els, root = document) {\n        if (typeof els === 'string') {\n            const doc = ('getElementById' in root) ? root : undefined;\n            // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\n            // so if we start with a number, assume it's an id and just return that one item...\n            // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\n            if (doc && !isNaN(+els[0])) { // start with digit\n                const el = doc.getElementById(els);\n                return el ? [el] : [];\n            }\n            let list = root.querySelectorAll(els);\n            if (!list.length && els[0] !== '.' && els[0] !== '#') {\n                list = root.querySelectorAll('.' + els);\n                if (!list.length) {\n                    list = root.querySelectorAll('#' + els);\n                }\n            }\n            return Array.from(list);\n        }\n        return [els];\n    }\n    /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\n    static getElement(els, root = document) {\n        if (typeof els === 'string') {\n            const doc = ('getElementById' in root) ? root : undefined;\n            if (!els.length)\n                return null;\n            if (doc && els[0] === '#') {\n                return doc.getElementById(els.substring(1));\n            }\n            if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\n                return root.querySelector(els);\n            }\n            // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\n            if (doc && !isNaN(+els[0])) { // start with digit\n                return doc.getElementById(els);\n            }\n            // finally try string, then id, then class\n            let el = root.querySelector(els);\n            if (doc && !el) {\n                el = doc.getElementById(els);\n            }\n            if (!el) {\n                el = root.querySelector('.' + els);\n            }\n            return el;\n        }\n        return els;\n    }\n    /** true if widget (or grid) makes this item lazyLoad */\n    static lazyLoad(n) {\n        return n.lazyLoad || n.grid?.opts?.lazyLoad && n.lazyLoad !== false;\n    }\n    /** create a div with the given classes */\n    static createDiv(classes, parent) {\n        const el = document.createElement('div');\n        classes.forEach(c => { if (c)\n            el.classList.add(c); });\n        parent?.appendChild(el);\n        return el;\n    }\n    /** true if we should resize to content. strict=true when only 'sizeToContent:true' and not a number which lets user adjust */\n    static shouldSizeToContent(n, strict = false) {\n        return n?.grid && (strict ?\n            (n.sizeToContent === true || (n.grid.opts.sizeToContent === true && n.sizeToContent === undefined)) :\n            (!!n.sizeToContent || (n.grid.opts.sizeToContent && n.sizeToContent !== false)));\n    }\n    /** returns true if a and b overlap */\n    static isIntercepted(a, b) {\n        return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\n    }\n    /** returns true if a and b touch edges or corners */\n    static isTouching(a, b) {\n        return Utils.isIntercepted(a, { x: b.x - 0.5, y: b.y - 0.5, w: b.w + 1, h: b.h + 1 });\n    }\n    /** returns the area a and b overlap */\n    static areaIntercept(a, b) {\n        const x0 = (a.x > b.x) ? a.x : b.x;\n        const x1 = (a.x + a.w < b.x + b.w) ? a.x + a.w : b.x + b.w;\n        if (x1 <= x0)\n            return 0; // no overlap\n        const y0 = (a.y > b.y) ? a.y : b.y;\n        const y1 = (a.y + a.h < b.y + b.h) ? a.y + a.h : b.y + b.h;\n        if (y1 <= y0)\n            return 0; // no overlap\n        return (x1 - x0) * (y1 - y0);\n    }\n    /** returns the area */\n    static area(a) {\n        return a.w * a.h;\n    }\n    /**\n     * Sorts array of nodes\n     * @param nodes array to sort\n     * @param dir 1 for ascending, -1 for descending (optional)\n     **/\n    static sort(nodes, dir = 1) {\n        const und = 10000;\n        return nodes.sort((a, b) => {\n            const diffY = dir * ((a.y ?? und) - (b.y ?? und));\n            if (diffY === 0)\n                return dir * ((a.x ?? und) - (b.x ?? und));\n            return diffY;\n        });\n    }\n    /** find an item by id */\n    static find(nodes, id) {\n        return id ? nodes.find(n => n.id === id) : undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static toBool(v) {\n        if (typeof v === 'boolean') {\n            return v;\n        }\n        if (typeof v === 'string') {\n            v = v.toLowerCase();\n            return !(v === '' || v === 'no' || v === 'false' || v === '0');\n        }\n        return Boolean(v);\n    }\n    static toNumber(value) {\n        return (value === null || value.length === 0) ? undefined : Number(value);\n    }\n    static parseHeight(val) {\n        let h;\n        let unit = 'px';\n        if (typeof val === 'string') {\n            if (val === 'auto' || val === '')\n                h = 0;\n            else {\n                const match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%|cm|mm)?$/);\n                if (!match) {\n                    throw new Error(`Invalid height val = ${val}`);\n                }\n                unit = match[2] || 'px';\n                h = parseFloat(match[1]);\n            }\n        }\n        else {\n            h = val;\n        }\n        return { h, unit };\n    }\n    /** copies unset fields in target to use the given default sources values */\n    // eslint-disable-next-line\n    static defaults(target, ...sources) {\n        sources.forEach(source => {\n            for (const key in source) {\n                if (!source.hasOwnProperty(key))\n                    return;\n                if (target[key] === null || target[key] === undefined) {\n                    target[key] = source[key];\n                }\n                else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\n                    // property is an object, recursively add it's field over... #1373\n                    this.defaults(target[key], source[key]);\n                }\n            }\n        });\n        return target;\n    }\n    /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\n    static same(a, b) {\n        if (typeof a !== 'object')\n            return a == b;\n        if (typeof a !== typeof b)\n            return false;\n        // else we have object, check just 1 level deep for being same things...\n        if (Object.keys(a).length !== Object.keys(b).length)\n            return false;\n        for (const key in a) {\n            if (a[key] !== b[key])\n                return false;\n        }\n        return true;\n    }\n    /** copies over b size & position (GridStackPosition), and optionally min/max as well */\n    static copyPos(a, b, doMinMax = false) {\n        if (b.x !== undefined)\n            a.x = b.x;\n        if (b.y !== undefined)\n            a.y = b.y;\n        if (b.w !== undefined)\n            a.w = b.w;\n        if (b.h !== undefined)\n            a.h = b.h;\n        if (doMinMax) {\n            if (b.minW)\n                a.minW = b.minW;\n            if (b.minH)\n                a.minH = b.minH;\n            if (b.maxW)\n                a.maxW = b.maxW;\n            if (b.maxH)\n                a.maxH = b.maxH;\n        }\n        return a;\n    }\n    /** true if a and b has same size & position */\n    static samePos(a, b) {\n        return a && b && a.x === b.x && a.y === b.y && (a.w || 1) === (b.w || 1) && (a.h || 1) === (b.h || 1);\n    }\n    /** given a node, makes sure it's min/max are valid */\n    static sanitizeMinMax(node) {\n        // remove 0, undefine, null\n        if (!node.minW) {\n            delete node.minW;\n        }\n        if (!node.minH) {\n            delete node.minH;\n        }\n        if (!node.maxW) {\n            delete node.maxW;\n        }\n        if (!node.maxH) {\n            delete node.maxH;\n        }\n    }\n    /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\n    static removeInternalAndSame(a, b) {\n        if (typeof a !== 'object' || typeof b !== 'object')\n            return;\n        for (let key in a) {\n            const aVal = a[key];\n            const bVal = b[key];\n            if (key[0] === '_' || aVal === bVal) {\n                delete a[key];\n            }\n            else if (aVal && typeof aVal === 'object' && bVal !== undefined) {\n                Utils.removeInternalAndSame(aVal, bVal);\n                if (!Object.keys(aVal).length) {\n                    delete a[key];\n                }\n            }\n        }\n    }\n    /** removes internal fields '_' and default values for saving */\n    static removeInternalForSave(n, removeEl = true) {\n        for (let key in n) {\n            if (key[0] === '_' || n[key] === null || n[key] === undefined)\n                delete n[key];\n        }\n        delete n.grid;\n        if (removeEl)\n            delete n.el;\n        // delete default values (will be re-created on read)\n        if (!n.autoPosition)\n            delete n.autoPosition;\n        if (!n.noResize)\n            delete n.noResize;\n        if (!n.noMove)\n            delete n.noMove;\n        if (!n.locked)\n            delete n.locked;\n        if (n.w === 1 || n.w === n.minW)\n            delete n.w;\n        if (n.h === 1 || n.h === n.minH)\n            delete n.h;\n    }\n    /** return the closest parent (or itself) matching the given class */\n    // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\n    //   while (el) {\n    //     if (el.classList.contains(name)) return el;\n    //     el = el.parentElement\n    //   }\n    //   return null;\n    // }\n    /** delay calling the given function for given delay, preventing new calls from happening while waiting */\n    static throttle(func, delay) {\n        let isWaiting = false;\n        return (...args) => {\n            if (!isWaiting) {\n                isWaiting = true;\n                setTimeout(() => { func(...args); isWaiting = false; }, delay);\n            }\n        };\n    }\n    static removePositioningStyles(el) {\n        const style = el.style;\n        if (style.position) {\n            style.removeProperty('position');\n        }\n        if (style.left) {\n            style.removeProperty('left');\n        }\n        if (style.top) {\n            style.removeProperty('top');\n        }\n        if (style.width) {\n            style.removeProperty('width');\n        }\n        if (style.height) {\n            style.removeProperty('height');\n        }\n    }\n    /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\n    static getScrollElement(el) {\n        if (!el)\n            return document.scrollingElement || document.documentElement; // IE support\n        const style = getComputedStyle(el);\n        const overflowRegex = /(auto|scroll)/;\n        if (overflowRegex.test(style.overflow + style.overflowY)) {\n            return el;\n        }\n        else {\n            return this.getScrollElement(el.parentElement);\n        }\n    }\n    /** @internal */\n    static updateScrollPosition(el, position, distance) {\n        // is widget in view?\n        const rect = el.getBoundingClientRect();\n        const innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\n        if (rect.top < 0 ||\n            rect.bottom > innerHeightOrClientHeight) {\n            // set scrollTop of first parent that scrolls\n            // if parent is larger than el, set as low as possible\n            // to get entire widget on screen\n            const offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\n            const offsetDiffUp = rect.top;\n            const scrollEl = this.getScrollElement(el);\n            if (scrollEl !== null) {\n                const prevScroll = scrollEl.scrollTop;\n                if (rect.top < 0 && distance < 0) {\n                    // moving up\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\n                        scrollEl.scrollTop += distance;\n                    }\n                    else {\n                        scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\n                    }\n                }\n                else if (distance > 0) {\n                    // moving down\n                    if (el.offsetHeight > innerHeightOrClientHeight) {\n                        scrollEl.scrollTop += distance;\n                    }\n                    else {\n                        scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\n                    }\n                }\n                // move widget y by amount scrolled\n                position.top += scrollEl.scrollTop - prevScroll;\n            }\n        }\n    }\n    /**\n     * @internal Function used to scroll the page.\n     *\n     * @param event `MouseEvent` that triggers the resize\n     * @param el `HTMLElement` that's being resized\n     * @param distance Distance from the V edges to start scrolling\n     */\n    static updateScrollResize(event, el, distance) {\n        const scrollEl = this.getScrollElement(el);\n        const height = scrollEl.clientHeight;\n        // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\n        // #1745 Special situation if scrollEl is document 'html': here browser spec states that\n        // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\n        // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\n        const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\n        const pointerPosY = event.clientY - offsetTop;\n        const top = pointerPosY < distance;\n        const bottom = pointerPosY > height - distance;\n        if (top) {\n            // This also can be done with a timeout to keep scrolling while the mouse is\n            // in the scrolling zone. (will have smoother behavior)\n            scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance });\n        }\n        else if (bottom) {\n            scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY) });\n        }\n    }\n    /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\n    static clone(obj) {\n        if (obj === null || obj === undefined || typeof (obj) !== 'object') {\n            return obj;\n        }\n        // return Object.assign({}, obj);\n        if (obj instanceof Array) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return [...obj];\n        }\n        return { ...obj };\n    }\n    /**\n     * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\n     * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\n     */\n    static cloneDeep(obj) {\n        // list of fields we will skip during cloneDeep (nested objects, other internal)\n        const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\n        // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\n        const ret = Utils.clone(obj);\n        for (const key in ret) {\n            // NOTE: we don't support function/circular dependencies so skip those properties for now...\n            if (ret.hasOwnProperty(key) && typeof (ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\n                ret[key] = Utils.cloneDeep(obj[key]);\n            }\n        }\n        return ret;\n    }\n    /** deep clone the given HTML node, removing teh unique id field */\n    static cloneNode(el) {\n        const node = el.cloneNode(true);\n        node.removeAttribute('id');\n        return node;\n    }\n    static appendTo(el, parent) {\n        let parentNode;\n        if (typeof parent === 'string') {\n            parentNode = Utils.getElement(parent);\n        }\n        else {\n            parentNode = parent;\n        }\n        if (parentNode) {\n            parentNode.appendChild(el);\n        }\n    }\n    // public static setPositionRelative(el: HTMLElement): void {\n    //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\n    //     el.style.position = \"relative\";\n    //   }\n    // }\n    static addElStyles(el, styles) {\n        if (styles instanceof Object) {\n            for (const s in styles) {\n                if (styles.hasOwnProperty(s)) {\n                    if (Array.isArray(styles[s])) {\n                        // support fallback value\n                        styles[s].forEach(val => {\n                            el.style[s] = val;\n                        });\n                    }\n                    else {\n                        el.style[s] = styles[s];\n                    }\n                }\n            }\n        }\n    }\n    static initEvent(e, info) {\n        const evt = { type: info.type };\n        const obj = {\n            button: 0,\n            which: 0,\n            buttons: 1,\n            bubbles: true,\n            cancelable: true,\n            target: info.target ? info.target : e.target\n        };\n        ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].forEach(p => evt[p] = e[p]); // keys\n        ['pageX', 'pageY', 'clientX', 'clientY', 'screenX', 'screenY'].forEach(p => evt[p] = e[p]); // point info\n        return { ...evt, ...obj };\n    }\n    /** copies the MouseEvent (or convert Touch) properties and sends it as another event to the given target */\n    static simulateMouseEvent(e, simulatedType, target) {\n        const me = e;\n        const simulatedEvent = new MouseEvent(simulatedType, {\n            bubbles: true,\n            composed: true,\n            cancelable: true,\n            view: window,\n            detail: 1,\n            screenX: e.screenX,\n            screenY: e.screenY,\n            clientX: e.clientX,\n            clientY: e.clientY,\n            ctrlKey: me.ctrlKey ?? false,\n            altKey: me.altKey ?? false,\n            shiftKey: me.shiftKey ?? false,\n            metaKey: me.metaKey ?? false,\n            button: 0,\n            relatedTarget: e.target\n        });\n        (target || e.target).dispatchEvent(simulatedEvent);\n    }\n    /**\n     * defines an element that is used to get the offset and scale from grid transforms\n     * returns the scale and offsets from said element\n    */\n    static getValuesFromTransformedElement(parent) {\n        const transformReference = document.createElement('div');\n        Utils.addElStyles(transformReference, {\n            opacity: '0',\n            position: 'fixed',\n            top: 0 + 'px',\n            left: 0 + 'px',\n            width: '1px',\n            height: '1px',\n            zIndex: '-999999',\n        });\n        parent.appendChild(transformReference);\n        const transformValues = transformReference.getBoundingClientRect();\n        parent.removeChild(transformReference);\n        transformReference.remove();\n        return {\n            xScale: 1 / transformValues.width,\n            yScale: 1 / transformValues.height,\n            xOffset: transformValues.left,\n            yOffset: transformValues.top,\n        };\n    }\n    /** swap the given object 2 field values */\n    static swap(o, a, b) {\n        if (!o)\n            return;\n        const tmp = o[a];\n        o[a] = o[b];\n        o[b] = tmp;\n    }\n    /** returns true if event is inside the given element rectangle */\n    // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\n    //    this.el.contains(event.relatedTarget as HTMLElement)\n    // public static inside(e: MouseEvent, el: HTMLElement): boolean {\n    //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\n    //   const target: HTMLElement = e.relatedTarget || (e as any).fromElement;\n    //   if (!target) {\n    //     const { bottom, left, right, top } = el.getBoundingClientRect();\n    //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\n    //   }\n    //   return el.contains(target);\n    // }\n    /** true if the item can be rotated (checking for prop, not space available) */\n    static canBeRotated(n) {\n        return !(!n || n.w === n.h || n.locked || n.noResize || n.grid?.opts.disableResize || (n.minW && n.minW === n.maxW) || (n.minH && n.minH === n.maxH));\n    }\n}\n//# sourceMappingURL=utils.js.map","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","__webpack_require__.nc = undefined;","import { GridStack } from 'gridstack';\nimport 'gridstack/dist/gridstack.min.css';\nimport '@fullcalendar/core/styles/main.css';\nimport '@fullcalendar/daygrid/styles/main.css';\nimport '@fullcalendar/timegrid/styles/main.css';\nimport '@fullcalendar/list/styles/main.css';\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const grid = GridStack.init({\n    cellHeight: 250,\n    draggable: {\n      handle: '.grid-stack-item-content'\n    },\n    resizable: {\n      handles: 'e, se, s, sw, w'\n    },\n    float: true\n  });\n});\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const form = document.getElementById('patient-search-form');\n  const resultsTable = document.getElementById('patient-results-table');\n  const resultsBody = document.getElementById('patient-results-body');\n  const noResultsMsg = document.getElementById('no-results-msg');\n\n  form.addEventListener('submit', async (e) => {\n    e.preventDefault();\n\n    const params = new URLSearchParams({\n      mrn: document.getElementById('search-mrn').value.trim(),\n      greek_fname: document.getElementById('search-greek-fname').value.trim(),\n      greek_lname: document.getElementById('search-greek-lname').value.trim(),\n      fname: document.getElementById('search-fname').value.trim(),\n      lname: document.getElementById('search-lname').value.trim(),\n      dob: document.getElementById('search-dob').value,\n      phone: document.getElementById('search-phone').value.trim(),\n      email: document.getElementById('search-email').value.trim(),\n      amka: document.getElementById('search-amka').value.trim(),\n    });\n\n    try {\n      const response = await fetch(`/api/patients?${params.toString()}`);\n      if (!response.ok) throw new Error('Network response was not ok');\n\n      const patients = await response.json();\n\n      resultsBody.innerHTML = '';\n\n      if (patients.length === 0) {\n        resultsTable.style.display = 'none';\n        noResultsMsg.style.display = 'block';\n      } else {\n        noResultsMsg.style.display = 'none';\n        resultsTable.style.display = 'table';\n\n        patients.forEach(p => {\n          const row = document.createElement('tr');\n          row.innerHTML = `\n            <td>${p.mrn}</td>\n            <td>${p.greek_fname || ''}</td>\n            <td>${p.greek_lname || ''}</td>\n            <td>${p.fname}</td>\n            <td>${p.lname}</td>\n            <td>${p.dob || ''}</td>\n            <td>${p.phone || ''}</td>\n            <td>${p.email || ''}</td>\n            <td>${p.amka || ''}</td>\n          `;\n          resultsBody.appendChild(row);\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching patient data:', error);\n      resultsTable.style.display = 'none';\n      noResultsMsg.textContent = 'Error loading results.';\n      noResultsMsg.style.display = 'block';\n    }\n  });\n});\n\n\n"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","GridStack","document","addEventListener","grid","init","cellHeight","draggable","handle","resizable","handles","form","getElementById","resultsTable","resultsBody","noResultsMsg","_ref","_callee","params","response","patients","_t","_context","preventDefault","URLSearchParams","mrn","trim","greek_fname","greek_lname","fname","lname","dob","phone","email","amka","fetch","concat","toString","ok","Error","json","innerHTML","style","display","forEach","row","createElement","appendChild","console","error","textContent","_x"],"sourceRoot":""}